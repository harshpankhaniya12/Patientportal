@page
@model Patientportal.Pages.Account.IndexModel
@{
    ViewData["Title"] = "Login";
    Layout = "_LoginLayout";

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Patient Portal</title>

    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/custom.css">
    <link rel="stylesheet" href="~/css/responsive.css">

    <link rel="shortcut icon" href="~/assets/favicon.ico" type="image/x-icon">
    <link rel="icon" href="./favicon.ico" type="image/x-icon">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
</head>
<body>

    <div class="page-login">
        <div class="login-lt">
            <img src="~/assets/login-inursking.webp" width="1111" height="855" alt="Inurskin">
        </div>

        <div class="login-rt">

            <div class="login-box">
                <!-- <img src="./images/inurskin-login-art.svg" width="179" height="64" alt="Logo"> -->
                <div class="login-box-head">
                    <img class="ius-logo" src="~/assets/inurskin-logo.svg" width="179" height="64" alt="Logo">
                    <h1>Login</h1>
                    <p class="text-rg text-16">Please fill your detail to access your account</p>
                </div>

                <div class="container-fluid g-0">
                    <form class="login-form" action="#" method="POST">
                        <div class="form-group">
                            <label for="pi-phone" class="form-label text-14 text-md">Phone</label>
                            <input type="text" name="phone" class="form-control form-input bg--lightgray" id="pi-phone" value="+91 9876543210">

                            <div class="send-otp text-end mt-4 mb-4">
                                <a href="#send-otp" class="bttn bttn-r bttn-primary w-100">Send OTP</a>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="pi-otp" class="form-label text-14 text-md">OTP sent to 9876543210</label>

                            <div class="otp-inps">
                                <input type="num" name="otp-1" class="form-control form-input bg--lightgray" id="otp-1">
                                <input type="num" name="otp-2" class="form-control form-input bg--lightgray" id="otp-2">
                                <input type="num" name="otp-3" class="form-control form-input bg--lightgray" id="otp-3">
                                <input type="num" name="otp-4" class="form-control form-input bg--lightgray" id="otp-4">
                            </div>
                        </div>

                        <input type="submit" class="bttn bttn-r bttn-primary mt-4 mb-4" name="Submit">
                    </form>
                </div>
            </div>

        </div>
    </div>

    <script src="./js/jquery.min.js"></script>
    <script src="./js/bootstrap.bundle.min.js"></script>
    <script src="./js/custom.js"></script>

</body>
</html>

<script>
    var countdownInterval;
    document.getElementById("sendotp").addEventListener("click", function (event) {
        event.preventDefault();
        handleOtpRequest(this);
    });

    // document.getElementById("resend-otp").addEventListener("click", function (event) {
    //     event.preventDefault();
    //     document.getElementById("invalidotp").style.display = "none";
    //     clearAllOtpFields();
    //     handleOtpRequest(this);
    // });

    function clearAllOtpFields() {
        // Select all OTP input fields
        const otpInputs = document.querySelectorAll('.otp-input');

        // Iterate over each input field and clear its value
        otpInputs.forEach(input => {
            input.value = '';
        });
    }

    // function handleOtpRequest(button) {
    //     const phoneNumber = document.getElementById("phone").value;
    //     const phoneValidationMessage = document.getElementById("phone-validation");

    //     if (/^\d{1,13}$/.test(phoneNumber)) {
    //         phoneValidationMessage.style.display = 'none';
    //         button.disabled = true;

    //         const formData = new FormData(document.getElementById("account"));
    //         formData.append("Phone", phoneNumber);

    //         fetch('/Account/Login?handler=SendOTP', {
    //             method: 'POST',
    //             body: formData,
    //             headers: {
    //                 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
    //             }
    //         })
    //             .then(response => response.json())
    //             .then(data => {
    //                 if (data.success) {
    //                     showOtpFields(phoneNumber);
    //                     startOtpResendTimer(button);
    //                 } else {
    //                     showError(data.error || "An error occurred. Please try again.");
    //                     resetSendOtpButton(button);
    //                 }
    //             })
    //             .catch(error => {
    //                 console.error('Error:', error);
    //                 showError("An error occurred. Please try again.");
    //                 resetSendOtpButton(button);
    //             });
    //     } else {
    //         phoneValidationMessage.style.display = 'block';
    //     }
    // }

    function handleOtpRequest(button) {
        const phoneNumber = document.getElementById("phone").value;
        const phoneValidationMessage = document.getElementById("phone-validation");
        const userNotExistsMessage = document.getElementById("user-not-exists");
        const invalidNumberMessage = document.getElementById("invalid-number");

        // Hide all messages initially
        phoneValidationMessage.style.display = 'none';
        userNotExistsMessage.style.display = 'none';
        invalidNumberMessage.style.display = 'none';

        // Check if the phone number is empty
        if (!phoneNumber) {
            phoneValidationMessage.style.display = 'block'; // Show "Please enter mobile number"
            return;
        }

        // Check if the phone number has less than 10 digits
        if (phoneNumber.length < 10) {
            invalidNumberMessage.style.display = 'block'; // Show "Invalid mobile number"
            return;
        }

        // Check if the phone number is valid (between 10 and 13 digits)
        if (/^\d{10,13}$/.test(phoneNumber)) {
            phoneValidationMessage.style.display = 'none'; // Hide "Please enter mobile number"
            invalidNumberMessage.style.display = 'none'; // Hide "Invalid mobile number"
            button.disabled = true;

            const formData = new FormData(document.getElementById("account"));
            formData.append("Phone", phoneNumber);

            fetch('/Account/Login?handler=SendOTP', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showOtpFields(phoneNumber);
                        //startOtpResendTimer(button);
                    } else {
                        showError(data.error || "User with the given mobile number does not exist.");
                        //resetSendOtpButton(button);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError("An error occurred. Please try again.");
                    //resetSendOtpButton(button);
                });
        } else {
            userNotExistsMessage.style.display = 'none'; // Hide "User does not exist" message
            phoneValidationMessage.style.display = 'block'; // Show "Please enter mobile number"
        }
    }

    function showError(message) {
        const userNotExistsMessage = document.getElementById("user-not-exists");
        userNotExistsMessage.textContent = message;
        userNotExistsMessage.style.display = 'block';
    }



    function showOtpFields(phoneNumber) {
        document.getElementById("OTPtext").style.display = 'flex';
        document.getElementById("LoginButton").style.display = 'flex';
        document.getElementById("otp-resend-timer").style.display = 'none';
        document.getElementById("phone-display").textContent = phoneNumber;
        document.getElementById("mobilenumber").style.display = "none";
        document.getElementById("sendopt1").style.display = "none"; // Hide the Send OTP button
        //document.getElementById("resend-otp").style.display = 'none'; // Hide the resend OTP link initially
        document.getElementById("otp-error-message").style.display = "none";
        document.getElementById("invalidotp").style.display = "none";
        initializeOtpInputs();
    }

    document.getElementById("edit-phone").addEventListener("click", function (event) {
        event.preventDefault();

        document.getElementById("OTPtext").style.display = 'none';
        document.getElementById("LoginButton").style.display = 'none';
        document.getElementById("otp-resend-timer").style.display = 'none';
        document.getElementById("mobilenumber").style.display = "block";
        document.getElementById("sendopt1").style.display = "block"; // Show the Send OTP button
        //document.getElementById("resend-otp").style.display = 'none'; // Hide the resend OTP link initially
        document.getElementById("edit-phone").style.display = 'block'; // Hide the back arrow
        document.getElementById("otp-error-message").style.display = "none";
    });


    function startOtpResendTimer(button) {
        let timeLeft = 30;
        const timerMessage = document.getElementById("otp-timer-message");

        // Hide the resend OTP link during the countdown
        document.getElementById("resend-otp").style.display = 'none';
        document.getElementById("edit-phone").style.display = 'block'; // Hide the back arrow during the countdown

        if (countdownInterval) {
            clearInterval(countdownInterval);
            $('#otp-timer-message').html('');
            console.log("yes interval clear");
        }

        countdownInterval = setInterval(() => {
            if (timeLeft > 0) {
                timerMessage.textContent = `Resend OTP in ${timeLeft}s`;
                timeLeft--;
            } else {
                clearInterval(countdownInterval);
                enableResendOtp();
            }
        }, 1000);
    }

    function enableResendOtp() {
        document.getElementById("otp-timer-message").textContent = ""; // Clear the timer message
        document.getElementById("resend-otp").style.display = 'block'; // Show the resend OTP link after the countdown
        document.getElementById("edit-phone").style.display = 'none';

        // Show the back arrow after the countdown
    }
    function initializeOtpInputs() {
        const inputs = document.querySelectorAll('.otp-input');

        // Set default value for the first input
        if (inputs.length > 0) {
            inputs[0].value = ''; // Default value for the first input
            inputs[0].focus(); // Automatically focus on the first input
        }

        inputs.forEach((input, index) => {
            input.addEventListener('input', function (e) {
                const value = e.target.value;

                if (isNaN(value)) {
                    e.target.value = ''; // Clear the input if not a number
                    return;
                }

                if (value.length === 1 && index < inputs.length - 1) {
                    inputs[index + 1].focus(); // Move to the next input
                }

                updateCombinedOtp(inputs);
            });

            input.addEventListener('keydown', function (e) {
                if (e.key === "Backspace" && e.target.value === '' && index > 0) {
                    inputs[index - 1].focus(); // Move to the previous input on Backspace
                }

                if (e.key === "ArrowLeft" && index > 0) {
                    inputs[index - 1].focus(); // Navigate to the previous input on ArrowLeft
                }

                if (e.key === "ArrowRight" && index < inputs.length - 1) {
                    inputs[index + 1].focus(); // Navigate to the next input on ArrowRight
                }
            });
        });
    }

    function updateCombinedOtp(inputs) {
        const combinedOtp = Array.from(inputs).map(input => input.value).join('');
        document.getElementById('combinedOtp').value = combinedOtp;
    }



    document.querySelector("form").addEventListener("submit", function (event) {
        const combinedOtp = document.getElementById("combinedOtp").value;

        if (combinedOtp.length !== 4) {
            event.preventDefault();
            document.getElementById("otp-error-message").style.display = 'block';
        }
    });

    function resetSendOtpButton(button) {
        button.disabled = false;
        button.textContent = "Send OTP";

        // Apply styles to the button
        button.style.marginTop = '20px';
        button.style.backgroundColor = '#0061AB';
        button.style.padding = '10px';
        button.style.borderRadius = '100px';
        button.style.color = 'white';
        button.style.border = '2px solid #0061AB';
        button.style.fontSize = 'medium';
        button.style.height = '40px';
    }

    // function showError(message) {
    //     const userNotExistsMessage = document.getElementById("user-not-exists");
    //     userNotExistsMessage.textContent = message;
    //     userNotExistsMessage.style.display = 'block';
    // }

    document.querySelectorAll('.otp-input').forEach(function (input) {
        input.addEventListener('input', function () {
            const otpInputs = document.querySelectorAll('.otp-input');
            const otpValues = Array.from(otpInputs).map(input => input.value).join('');

            if (otpValues.length === otpInputs.length) {
                // All OTP fields are filled, trigger the login process
                triggerOtpLogin(otpValues);
            }
        });
    });

    function triggerOtpLogin(otpValues) {
        const combinedOtpInput = document.getElementById("combinedOtp");
        combinedOtpInput.value = otpValues;

        const formData = new FormData(document.getElementById("account"));
        formData.append("CombinedOtp", otpValues);

        fetch('/Account/Login?handler=OtpLogin', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/InitializeSession' || '/'; // Redirect upon successful login
                } else {
                    document.getElementById("invalidotp").style.display = 'block';
                    document.getElementById("invalidotp").textContent = data.error || "An error occurred. Please try again.";
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById("invalidotp").style.display = 'block';
                document.getElementById("invalidotp").textContent = "An error occurred. Please try again.";
            });
    }


</script>

@* <style>
    /* Style for the container holding the buttons */
    .d-flex {
        display: flex;
        justify-content: space-between; /* Aligns items to both ends */
    }

    /* Style for the individual buttons */
    #resend-otp {
        color: #0061AB; /* Adjust color as needed */
        font-weight: bold;
        font-size: 16px; /* Adjust font size as needed */
        text-decoration: none; /* Remove underline */
    }

    #back-arrow {
        color: #0061AB; /* Adjust color as needed */
        font-weight: bold;
        font-size: 16px; /* Adjust font size as needed */
        text-decoration: none; /* Remove underline */
    }


    #edit-phone {
        margin-left: 10px;
        color: #0061AB; /* Edit icon color */
    }

        #edit-phone:hover {
            color: #004080; /* Darker color on hover */
        }


    #otp {
        display: flex;
    }
</style>

 *@