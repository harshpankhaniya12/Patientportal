@page
@model Patientportal.Pages.Account.IndexModel
@{
    ViewData["Title"] = "Login";
    Layout = "_LoginLayout";

}
<link href="https://cdn.syncfusion.com/ej2/22.1.34/ej2-icons/styles/bootstrap5.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<link rel="stylesheet" href="~/css/app/login.css" />
    <link href="~/css/syncfusion/bootstrap5.css" rel="stylesheet" />
<link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.css" />
<main class="d-flex flex-col flex-wrap justify-content-center align-items-center" style="height: 100vh; overflow: hidden;">
    <div class="login__left" style="flex-basis: 60%; text-align: center; height: 100%;">
        <img src="~/assets/inursknmainlogo.png" alt="" style="max-width: 100%; height: 100%;">
    </div>

    <div class="login__right d-flex flex-column justify-content-center" style="flex-basis: 40%; height: 100%;">
        <div class="login_detail_container" style="max-width: 100%;">
            <img class="logo" src="~/assets/inurskn-logo.png" alt="" style="max-width: 100%; height: auto;">
            <h1 class="fw-bold loginlabel">Login</h1>
            <p>Please fill your details to access your account</p>
            <form id="account" method="post" class="form w-100">
                <div class="mt-4">
                    <div class="form-group" id="mobilenumber">
                        <label for="phone">Enter Mobile Number*</label>
                        <input type="text"  id="phone" name="Phone" class="form-control"
                               placeholder="" required maxlength="13" pattern="^\d{10,13}$"
                               title="Please enter a valid phone number with up to 13 digits"
                               oninput="this.value = this.value.replace(/[^0-9]/g, '')">

                        <span id="phone-validation" class="text-danger" style="display:none;">Please enter mobile number.</span>
                        <span id="user-not-exists" class="text-danger" style="display:none;">User with the given mobile number does not exist.</span>
                        <span id="invalid-number" class="text-danger" style="display:none;">Invalid mobile number.</span>

                    </div>

                    <div class="form-group mt-2" id="sendopt1">
                        <a id="sendotp" href="#"
                           class="btn w-100 btn-lg d-flex justify-content-center align-items-center"
                           style="margin-top: 20px; background: #0061AB; padding-block: 10px; border-radius: 100px; color: white; border: 2px solid #0061AB;">
                            <span class="h6 mb-0">
                                Send OTP
                            </span>
                        </a>
                    </div>



                    <div class="row justify-content-center" id="OTPtext" style="display:none;">
                        <span id="otp">
                            OTP sent to  <span id="phone-display" style="margin-left: 5px;"></span> <span id="edit-phone" style="cursor: pointer;">
                                <i class="fas fa-edit"></i> <!-- Font Awesome Edit Icon -->
                            </span>
                        </span>
                        <div class="col">
                            @* <input type="text" class="form-control text-center"
                            maxlength="1" required="" placeholder="#" autocomplete="off">*@
                            <input type="text"  id="1" class="form-control text-center otp-input" maxlength="1"
                                   autocomplete="off" placeholder="" />
                        </div>
                        <div class="col">
                            <input type="text"  id="2" class="form-control text-center otp-input"
                                   maxlength="1" placeholder="" autocomplete="off">
                        </div>
                        <div class="col">
                            <input type="text"  id="3" class="form-control text-center otp-input"
                                   maxlength="1" placeholder="" autocomplete="off">
                        </div>
                        <div class="col">
                            <input type="text" id="4" class="form-control text-center otp-input"
                                   maxlength="1" placeholder="" autocomplete="off">
                        </div>



                    </div>
                    <span id="invalidotp" class="text-danger" style="display:none;">Invalid OTP.</span>



                    <input type="hidden" id="combinedOtp" name="CombinedOtp" />



                    <div id="otp-error-message" class="text-danger" style="display: none;">Please enter the complete OTP.</div>
                    <!-- Button Container -->
                    @* <div class="w-100 mt-3" id="resendotp">
                    <div class="d-flex justify-content-between">
                    <a id="resend-otp" href="#" style="display: none;">
                    Resend OTP
                    </a>

                    </div>
                    </div> *@

                </div>

                <div id="otp-resend-timer" style="display: none; margin-top: 10px;">
                    <span id="otp-timer-message"></span>
                </div>
                <!-- Login Button -->
                <div class="form-group mt-2" id="LoginButton" style="display:none;">
                    <id ="loginButton">
                </div>

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>


            </form>
        </div>
    </div>
</main>

<script>
    var countdownInterval;
    document.getElementById("sendotp").addEventListener("click", function (event) {
        event.preventDefault();
        handleOtpRequest(this);
    });

    // document.getElementById("resend-otp").addEventListener("click", function (event) {
    //     event.preventDefault();
    //     document.getElementById("invalidotp").style.display = "none";
    //     clearAllOtpFields();
    //     handleOtpRequest(this);
    // });

    function clearAllOtpFields() {
        // Select all OTP input fields
        const otpInputs = document.querySelectorAll('.otp-input');

        // Iterate over each input field and clear its value
        otpInputs.forEach(input => {
            input.value = '';
        });
    }

    // function handleOtpRequest(button) {
    //     const phoneNumber = document.getElementById("phone").value;
    //     const phoneValidationMessage = document.getElementById("phone-validation");

    //     if (/^\d{1,13}$/.test(phoneNumber)) {
    //         phoneValidationMessage.style.display = 'none';
    //         button.disabled = true;

    //         const formData = new FormData(document.getElementById("account"));
    //         formData.append("Phone", phoneNumber);

    //         fetch('/Account/Login?handler=SendOTP', {
    //             method: 'POST',
    //             body: formData,
    //             headers: {
    //                 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
    //             }
    //         })
    //             .then(response => response.json())
    //             .then(data => {
    //                 if (data.success) {
    //                     showOtpFields(phoneNumber);
    //                     startOtpResendTimer(button);
    //                 } else {
    //                     showError(data.error || "An error occurred. Please try again.");
    //                     resetSendOtpButton(button);
    //                 }
    //             })
    //             .catch(error => {
    //                 console.error('Error:', error);
    //                 showError("An error occurred. Please try again.");
    //                 resetSendOtpButton(button);
    //             });
    //     } else {
    //         phoneValidationMessage.style.display = 'block';
    //     }
    // }

    function handleOtpRequest(button) {
        const phoneNumber = document.getElementById("phone").value;
        const phoneValidationMessage = document.getElementById("phone-validation");
        const userNotExistsMessage = document.getElementById("user-not-exists");
        const invalidNumberMessage = document.getElementById("invalid-number");

        // Hide all messages initially
        phoneValidationMessage.style.display = 'none';
        userNotExistsMessage.style.display = 'none';
        invalidNumberMessage.style.display = 'none';

        // Check if the phone number is empty
        if (!phoneNumber) {
            phoneValidationMessage.style.display = 'block'; // Show "Please enter mobile number"
            return;
        }

        // Check if the phone number has less than 10 digits
        if (phoneNumber.length < 10) {
            invalidNumberMessage.style.display = 'block'; // Show "Invalid mobile number"
            return;
        }

        // Check if the phone number is valid (between 10 and 13 digits)
        if (/^\d{10,13}$/.test(phoneNumber)) {
            phoneValidationMessage.style.display = 'none'; // Hide "Please enter mobile number"
            invalidNumberMessage.style.display = 'none'; // Hide "Invalid mobile number"
            button.disabled = true;

            const formData = new FormData(document.getElementById("account"));
            formData.append("Phone", phoneNumber);

            fetch('/Account/Login?handler=SendOTP', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showOtpFields(phoneNumber);
                        //startOtpResendTimer(button);
                    } else {
                        showError(data.error || "User with the given mobile number does not exist.");
                        //resetSendOtpButton(button);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError("An error occurred. Please try again.");
                    //resetSendOtpButton(button);
                });
        } else {
            userNotExistsMessage.style.display = 'none'; // Hide "User does not exist" message
            phoneValidationMessage.style.display = 'block'; // Show "Please enter mobile number"
        }
    }

    function showError(message) {
        const userNotExistsMessage = document.getElementById("user-not-exists");
        userNotExistsMessage.textContent = message;
        userNotExistsMessage.style.display = 'block';
    }



    function showOtpFields(phoneNumber) {
        document.getElementById("OTPtext").style.display = 'flex';
        document.getElementById("LoginButton").style.display = 'flex';
        document.getElementById("otp-resend-timer").style.display = 'none';
        document.getElementById("phone-display").textContent = phoneNumber;
        document.getElementById("mobilenumber").style.display = "none";
        document.getElementById("sendopt1").style.display = "none"; // Hide the Send OTP button
        //document.getElementById("resend-otp").style.display = 'none'; // Hide the resend OTP link initially
        document.getElementById("otp-error-message").style.display = "none";
        document.getElementById("invalidotp").style.display = "none";
        initializeOtpInputs();
    }

    document.getElementById("edit-phone").addEventListener("click", function (event) {
        event.preventDefault();

        document.getElementById("OTPtext").style.display = 'none';
        document.getElementById("LoginButton").style.display = 'none';
        document.getElementById("otp-resend-timer").style.display = 'none';
        document.getElementById("mobilenumber").style.display = "block";
        document.getElementById("sendopt1").style.display = "block"; // Show the Send OTP button
        //document.getElementById("resend-otp").style.display = 'none'; // Hide the resend OTP link initially
        document.getElementById("edit-phone").style.display = 'block'; // Hide the back arrow
        document.getElementById("otp-error-message").style.display = "none";
    });


    function startOtpResendTimer(button) {
        let timeLeft = 30;
        const timerMessage = document.getElementById("otp-timer-message");

        // Hide the resend OTP link during the countdown
        document.getElementById("resend-otp").style.display = 'none';
        document.getElementById("edit-phone").style.display = 'block'; // Hide the back arrow during the countdown

        if (countdownInterval) {
            clearInterval(countdownInterval);
            $('#otp-timer-message').html('');
            console.log("yes interval clear");
        }

        countdownInterval = setInterval(() => {
            if (timeLeft > 0) {
                timerMessage.textContent = `Resend OTP in ${timeLeft}s`;
                timeLeft--;
            } else {
                clearInterval(countdownInterval);
                enableResendOtp();
            }
        }, 1000);
    }

    function enableResendOtp() {
        document.getElementById("otp-timer-message").textContent = ""; // Clear the timer message
        document.getElementById("resend-otp").style.display = 'block'; // Show the resend OTP link after the countdown
        document.getElementById("edit-phone").style.display = 'none';

        // Show the back arrow after the countdown
    }
    function initializeOtpInputs() {
        const inputs = document.querySelectorAll('.otp-input');

        // Set default value for the first input
        if (inputs.length > 0) {
            inputs[0].value = ''; // Default value for the first input
            inputs[0].focus(); // Automatically focus on the first input
        }

        inputs.forEach((input, index) => {
            input.addEventListener('input', function (e) {
                const value = e.target.value;

                if (isNaN(value)) {
                    e.target.value = ''; // Clear the input if not a number
                    return;
                }

                if (value.length === 1 && index < inputs.length - 1) {
                    inputs[index + 1].focus(); // Move to the next input
                }

                updateCombinedOtp(inputs);
            });

            input.addEventListener('keydown', function (e) {
                if (e.key === "Backspace" && e.target.value === '' && index > 0) {
                    inputs[index - 1].focus(); // Move to the previous input on Backspace
                }

                if (e.key === "ArrowLeft" && index > 0) {
                    inputs[index - 1].focus(); // Navigate to the previous input on ArrowLeft
                }

                if (e.key === "ArrowRight" && index < inputs.length - 1) {
                    inputs[index + 1].focus(); // Navigate to the next input on ArrowRight
                }
            });
        });
    }

    function updateCombinedOtp(inputs) {
        const combinedOtp = Array.from(inputs).map(input => input.value).join('');
        document.getElementById('combinedOtp').value = combinedOtp;
    }



    document.querySelector("form").addEventListener("submit", function (event) {
        const combinedOtp = document.getElementById("combinedOtp").value;

        if (combinedOtp.length !== 4) {
            event.preventDefault();
            document.getElementById("otp-error-message").style.display = 'block';
        }
    });

    function resetSendOtpButton(button) {
        button.disabled = false;
        button.textContent = "Send OTP";

        // Apply styles to the button
        button.style.marginTop = '20px';
        button.style.backgroundColor = '#0061AB';
        button.style.padding = '10px';
        button.style.borderRadius = '100px';
        button.style.color = 'white';
        button.style.border = '2px solid #0061AB';
        button.style.fontSize = 'medium';
        button.style.height = '40px';
    }

    // function showError(message) {
    //     const userNotExistsMessage = document.getElementById("user-not-exists");
    //     userNotExistsMessage.textContent = message;
    //     userNotExistsMessage.style.display = 'block';
    // }

    document.querySelectorAll('.otp-input').forEach(function (input) {
        input.addEventListener('input', function () {
            const otpInputs = document.querySelectorAll('.otp-input');
            const otpValues = Array.from(otpInputs).map(input => input.value).join('');

            if (otpValues.length === otpInputs.length) {
                // All OTP fields are filled, trigger the login process
                triggerOtpLogin(otpValues);
            }
        });
    });

    function triggerOtpLogin(otpValues) {
        const combinedOtpInput = document.getElementById("combinedOtp");
        combinedOtpInput.value = otpValues;

        const formData = new FormData(document.getElementById("account"));
        formData.append("CombinedOtp", otpValues);

        fetch('/Account/Login?handler=OtpLogin', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/InitializeSession' || '/'; // Redirect upon successful login
                } else {
                    document.getElementById("invalidotp").style.display = 'block';
                    document.getElementById("invalidotp").textContent = data.error || "An error occurred. Please try again.";
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById("invalidotp").style.display = 'block';
                document.getElementById("invalidotp").textContent = "An error occurred. Please try again.";
            });
    }


</script>

<style>
    /* Style for the container holding the buttons */
    .d-flex {
        display: flex;
        justify-content: space-between; /* Aligns items to both ends */
    }

    /* Style for the individual buttons */
    #resend-otp {
        color: #0061AB; /* Adjust color as needed */
        font-weight: bold;
        font-size: 16px; /* Adjust font size as needed */
        text-decoration: none; /* Remove underline */
    }

    #back-arrow {
        color: #0061AB; /* Adjust color as needed */
        font-weight: bold;
        font-size: 16px; /* Adjust font size as needed */
        text-decoration: none; /* Remove underline */
    }


    #edit-phone {
        margin-left: 10px;
        color: #0061AB; /* Edit icon color */
    }

        #edit-phone:hover {
            color: #004080; /* Darker color on hover */
        }


    #otp {
        display: flex;
    }
</style>

