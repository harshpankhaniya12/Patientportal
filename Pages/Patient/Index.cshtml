@page
@model Patientportal.Pages.Patient.IndexModel
@{
    ViewData["Title"] = "Patient Portal";
    Layout = "_LayoutMain";
}
@{

    List<object> toolbarItems = new List<object>();
    toolbarItems.Add("Search");


    List<string> MaritalStatusList = new List<string> { "Single", "Married", "Divorced" };

}
@Html.AntiForgeryToken()
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Portal</title>

    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/custom.css">
    <link rel="stylesheet" href="~/css/responsive.css">

    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon">
    <link rel="icon" href="./favicon.ico" type="image/x-icon">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">

</head>
<body>
    <main class="page">
        <div class="container container-x">
            <h1 class="page-title text-28">Patient Portal</h1>
            <div class="ius-block ius-card ius-appdata">
                <div class="ius-block-head">
                    <h2>Appointment Information</h2>

                    <div class="ius-grid-filters">
                        <div class="dropdown">
                            <a class="bttn-add" href="#" data-bs-toggle="dropdown" title="Add Appointment">
                                <img loading="lazy" src="~/assets/plus.svg" width="19" height="19" alt="Add">
                            </a>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#schedulerModal2">
                                        Appointment for Consultation
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#oConsultationModal">
                                        Appointment Request for Online Consultation
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#cosmeticProcModel">
                                        Appointment Request for Procedures
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>

                </div>

                <!-- Only for desktop : Syncfusion -->
                <div class="ius-table d-none d-lg-block table-responsive">
                    <ejs-grid id="GridAppointments"
                              allowResizing="true"
                              allowExcelExport="true"
                              allowFiltering="false"
                              allowPaging="true"
                              allowSorting="false"
                              allowSelection="true"
                              allowReordering="true"
                              enableHeaderFocus="true"
                              enablePersistence="true"
                              enableHover="true"
                              autoFit="true"
                              height="200"
                              showColumnChooser="true"
                              rowHeight="38"
                              toolbar=toolbarItems
                              queryCellInfo="onQueryCellInfo"
                              toolbarClick="toolbarClick">

                        <e-data-manager url="/Patient/Index?handler=AppointmentView&Id=@Model.Id" adaptor="UrlAdaptor" crossDomain="true"></e-data-manager>

                        <e-grid-searchsettings fields="@(new string[] {"AppoinmentType","DoctorName","AppointmentStartTime","StatusName"})"></e-grid-searchsettings>

                        <e-grid-filtersettings type="Excel"></e-grid-filtersettings>
                        <e-grid-loadingIndicator indicatorType="Shimmer"></e-grid-loadingIndicator>
                        <e-grid-pagesettings pageCount="15" pageSize="15" pageSizes="@(new string[] { "All","12","15","25","50"})"></e-grid-pagesettings>
                        <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>

                        <e-grid-columns>

                            <e-grid-column headerText="Actions" width="120" textAlign="Center" template="#actionTemplate"></e-grid-column>
                            <e-grid-column field="Id" headerText="Id" width="200" visible="false"></e-grid-column>
                            <e-grid-column field="AppoinmentType" headerText="Type of Appointment" width="200"></e-grid-column>
                            <e-grid-column field="DoctorName" headerText="Appointment With" width="200"></e-grid-column>
                            <e-grid-column field="AppointmentStartTime" headerText="Appointment Date Time" format="@Model.EjsDateTimePattern" type="dateTime" width="200"></e-grid-column>
                            <e-grid-column field="StatusName" headerText="Status" width="150"></e-grid-column>
                        </e-grid-columns>
                    </ejs-grid>
                    <script id="actionTemplate" type="text/x-template">
                        ${if(statusName !== "Cancelled" && appoinmentType !== "Appointment Request for Online Consultation" && appoinmentType !== "Appointment Request for Procedures")}
                            <a href="#schedulerModal" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#schedulerModal">
                                <img loading="lazy" src="@Url.Content("~/assets/calendar.svg")" width="18" height="20" alt="Calendar">
                            </a>
                            <a href="#app-cancel" class="marginleft" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                <img loading="lazy" src="@Url.Content("~/assets/delete.svg")" width="18" height="20" alt="Cancel">
                            </a>
                        ${/if}
                    </script>

                </div>
            </div>

            @if (Model.ChangeRequests.Count > 0 && Model.ChangeRequests != null)
            {
                <div class="ius-block ius-card ius-notes">
                    <h2 class="mb-2 pb-1 text--red">Changes Requested</h2>
                    <ol>
                        @foreach (var change in Model.ChangeRequests)
                        {
                            <li>@change</li>
                        }
                    </ol>
                </div>

            }
            <div class="ius-block ius-card ius-notes">
                <h2 class="mb-2 pb-1 text--red">Note</h2>
                <ol>
                    @* <li>Appointment  will be booked for consultation with Dr. Sejal Saheta.</li> *@
                    <li>In case a calendar slot is not available as per your convinence please call <a href="tel:+91-9819286930" title="91-9819286930">+91 9819286930</a> / <a href="tel:+91-9326028277" title="91-9326028277">+91 9326028277</a></li>
                </ol>
            </div>
            <div class="ius-block ius-card">
                <h2>Patient Information</h2>

                <form class="ius-form" action="#" method="POST">
                    <input type="hidden" id="PatientId" asp-for="PatientData.Id" name="medicalPatientSignature" class="custom-field-height" />
                    <div class="row">
                        <div class="col-md-6 col-xl-4">
                            <label for="pi-name" class="form-label">Name*</label>
                            <input type="text" name="patientname" maxlength="100" asp-for="PatientData.Name" class="form-control" id="pi-name">
                            <span asp-validation-for="PatientData.Name" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-phoneno" class="form-label">Phone Number*</label>
                            <input type="text" name="phoneno" asp-for="PatientData.Mobile" class="form-control" id="pi-phoneno" disabled>
                            <span asp-validation-for="PatientData.Mobile" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-email" class="form-label">Email*</label>
                            <input type="email" name="email" asp-for="PatientData.Email" maxlength="100" class="form-control" id="pi-email">
                            <span asp-validation-for="PatientData.Email" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-age" class="form-label">Age*</label>
                            <input type="number" name="age" asp-for="PatientData.Age" maxlength="2" class="form-control" id="pi-age">
                            <span asp-validation-for="PatientData.Age" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-dob" class="form-label">Date of Birth*</label>
                            @* <input type="date" name="dob" class="form-control form-date" id="pi-dob" value="1995-09-03"> *@
                            <ejs-datepicker id="pi-dob" ejs-for="PatientData.Dob" class="form-control" format="dd/MM/yyyy" style="height: 45px;"></ejs-datepicker>
                            <span asp-validation-for="PatientData.Dob" class="text-danger"></span>
                        </div>
                        <script>
                            document.addEventListener("DOMContentLoaded", function () {
                                var dobInput = document.getElementById("pi-dob");

                                dobInput.addEventListener("input", function (e) {
                                    var val = dobInput.value.replace(/\D/g, ""); // Remove non-numeric characters
                                    var formatted = "";

                                    if (val.length > 2) {
                                        formatted += val.substring(0, 2) + "/";
                                        if (val.length > 4) {
                                            formatted += val.substring(2, 4) + "/";
                                            formatted += val.substring(4, 8);
                                        } else {
                                            formatted += val.substring(2);
                                        }
                                    } else {
                                        formatted = val;
                                    }

                                    dobInput.value = formatted;
                                });

                                dobInput.addEventListener("keydown", function (event) {
                                    var allowedKeys = [8, 46]; // Allow backspace and delete
                                    if ((event.keyCode >= 48 && event.keyCode <= 57) ||  // Numbers 0-9
                                        (event.keyCode >= 96 && event.keyCode <= 105) || // Numpad Numbers
                                        allowedKeys.includes(event.keyCode)) {
                                        return true;
                                    }
                                    event.preventDefault(); // Prevent other keys
                                });
                            });
                        </script>
                        <div class="col-md-6 col-xl-4">
                            <label class="form-label">Gender*</label>

                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="gender" id="gender-male">
                                <label class="btn" for="gender-male">Male</label>

                                <input type="radio" class="btn-check" name="gender" id="gender-female">
                                <label class="btn" for="gender-female">Female</label>

                                <input type="radio" class="btn-check" name="gender" id="gender-other">
                                <label class="btn" for="gender-other">Other</label>
                            </div>
                            <span asp-validation-for="PatientData.Gender" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-matstat" class="form-label">Marital Status*</label>
                            <ejs-dropdownlist Id="pi-matstat" ejs-for="PatientData.MaritalStatus" style="height: 45px;" class="form-control" TValue="string" DataSource="MaritalStatusList" Placeholder="Select Marital Status"></ejs-dropdownlist>
                            <span asp-validation-for="PatientData.MaritalStatus" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-pincode" class="form-label">Pincode</label>
                            <input type="number" name="pincode" id="pi-pincode" asp-for="PatientData.Pincode" class="form-control">
                            <span asp-validation-for="PatientData.Pincode" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-locality" class="form-label">Locality</label>
                            <input type="text" name="locality" id="pi-locality" asp-for="PatientData.Locality" class="form-control">
                            <span asp-validation-for="PatientData.Locality" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-address" class="form-label">Address</label>
                            <textarea type="text" name="address" style="min-height:45px;" asp-for="PatientData.Address" id="pi-address" class="form-control"> </textarea>
                            <span asp-validation-for="PatientData.Address" class="text-danger"></span>

                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-city" class="form-label">City</label>
                            <input type="text" id="pi-city" class="form-control" name="city" asp-for="PatientData.CityName">
                            <span asp-validation-for="PatientData.City" class="text-danger"></span>

                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-state" class="form-label">State</label>
                            <input type="text" id="pi-state" class="form-control" name="state" asp-for="PatientData.StateName" >
                            <span asp-validation-for="PatientData.State" class="text-danger"></span>

                            @*  <ejs-dropdownlist ID="pi-state" class="form-control"  TValue="string" DataSource="StateList" Placeholder="Select State"></ejs-dropdownlist>
                            *@
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-country" class="form-label">Country</label>
                            <input type="text" id="pi-country" class="form-control" name="Country" asp-for="PatientData.CountryName">
                            <span asp-validation-for="PatientData.CountryName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-actions d-flex justify-content-between align-items-center flex-wrap">
                        <div class="invoice-info mb-2">
                            <label for="invoice-amount" class="form-label me-2">Invoice Amount:</label>
                            <span id="invoice-amount" class="pa-amt">@ViewData["Invoice"]</span>
                        </div>

                        <div class="action-buttons d-flex gap-2">
                            <a href="#" class="bttn bttn-primary" id="edit-btn" title="Edit">Edit</a>
                            <a href="#" class="bttn bttn-primary-outline" id="cancel-btn" title="Cancel" disabled>Cancel</a>
                            <a href="#" class="bttn bttn-primary" id="save-btn" title="Save" disabled>Save</a>
                        </div>
                    </div>
                </form>
            </div>


            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    // Event delegation for dynamically generated elements
                    document.body.addEventListener("click", function (event) {
                        let rescheduleBtn = event.target.closest(".app-resched");
                        let cancelBtn = event.target.closest("[data-bs-target='#app-cancel']");

                        if (rescheduleBtn) {
                            let appointmentId;

                            // Check if clicked inside the grid or a dynamically generated card
                            let row = rescheduleBtn.closest("tr");
                            if (row && document.getElementById("GridAppointments")) {
                                let grid = document.getElementById("GridAppointments").ej2_instances[0];
                                let rowData = grid.getRowInfo(row).rowData;
                                appointmentId = rowData.id;
                            } else {
                                // Handle dynamically generated card
                                let card = rescheduleBtn.closest(".ius-gridrow");
                                if (card) {
                                    appointmentId = card.querySelector("input[name='appointmentId']").value;
                                }
                            }

                            // Set the appointmentId value in the hidden field inside the Reschedule Modal
                            if (appointmentId) {
                                document.getElementById("AppoinmentId").value = appointmentId;
                            }
                        }

                        if (cancelBtn) {
                            let appointmentId;

                            // Check if clicked inside the grid or a dynamically generated card
                            let row = cancelBtn.closest("tr");
                            if (row && document.getElementById("GridAppointments")) {
                                let grid = document.getElementById("GridAppointments").ej2_instances[0];
                                let rowData = grid.getRowInfo(row).rowData;
                                appointmentId = rowData.id;
                            } else {
                                // Handle dynamically generated card
                                let card = cancelBtn.closest(".ius-gridrow");
                                if (card) {
                                    appointmentId = card.querySelector("input[name='appointmentId']").value;
                                }
                            }

                            // Set the appointmentId value in the hidden field inside the Cancel Modal
                            if (appointmentId) {
                                document.getElementById("CancelPatientId").value = appointmentId;
                            }
                        }
                    });
                });
            </script>

            <script>

                document.addEventListener("DOMContentLoaded", function () {
                    var ageInput = document.getElementById("pi-age");
                    var dobPicker = document.getElementById("pi-dob").ej2_instances[0]; // Syncfusion Datepicker instance

                    // Age se Date of Birth calculate karna
                    ageInput.addEventListener("input", function () {
                        var age = parseInt(this.value, 10);
                        var today = new Date();

                        if (!isNaN(age) && age > 0) {
                            var birthYear = today.getFullYear() - age;
                            var birthDate = new Date(birthYear, today.getMonth(), today.getDate());
                            dobPicker.value = birthDate; // Syncfusion Datepicker me set karna
                        } else if (age === 0) {
                            var yesterday = new Date();
                            yesterday.setDate(today.getDate() - 1); // Today - 1 day
                            dobPicker.value = yesterday; // DOB me ek din pehle ka date set karna
                        }
                    });

                    // Date of Birth se Age calculate karna
                    dobPicker.addEventListener("input", function () {
                        updateAge();
                    });

                    dobPicker.addEventListener("change", function () {
                        updateAge();
                    });

                    function updateAge() {
                        var dob = dobPicker.value;
                        if (dob) {
                            var today = new Date();
                            var birthDate = new Date(dob);
                            var age = today.getFullYear() - birthDate.getFullYear();

                            // Agar DOB ke month aur date aaj ke month aur date se aage hain, toh age -1 karna
                            var monthDiff = today.getMonth() - birthDate.getMonth();
                            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                                age--;
                            }

                            ageInput.value = age; // Age input ko update karna
                        }
                    }
                });
            </script>

            <script>
                function onQueryCellInfo(args) {
                    if (args.column.field === "StatusName") {
                        if (args.data.statusName === "Booked") {
                            args.cell.innerHTML = `<span class="badge badge-success">Booked</span>`;
                        } else if (args.data.statusName === "Completed") {
                            args.cell.innerHTML = `<span class="badge badge-Primary">Completed</span>`;
                        }
                        else if (args.data.statusName === "Request Sent") {
                            args.cell.innerHTML = `<span class="badge badge-secondary">Request Sent</span>`;
                        }
                        else if (args.data.statusName === "Confirmed") {
                            args.cell.innerHTML = `<span class="badge badge-info">Confirmed</span>`; // changed color
                        } else if (args.data.statusName === "Check-In") {
                            args.cell.innerHTML = `<span class="badge badge-warning">Check-In</span>`; // changed color
                        } else if (args.data.statusName === "WalkOut") {
                            args.cell.innerHTML = `<span class="badge badge-dark">WalkOut</span>`; // changed color
                        }
                        else if (args.data.statusName === "Close") {
                            args.cell.innerHTML = `<span class="badge badge-Primary">Completed</span>`;
                        }
                        else if (args.data.statusName === "Cancelled") {
                            args.cell.innerHTML = `<span class="badge badge-danger">Cancelled</span>`;
                        }
                    }
                }

            </script>
            <!-- Only for mobile : Syncfusion -->
            <div class="ius-grid d-lg-none text-14" id="appointments-container">
                <div class="ius-gridrow">
                    <div class="ius-appbody">
                        <div class="ius-appinfo">
                            <h3>Dr. Sejal Saheta</h3>
                            <div class="ius-apptyfo">
                                <span class="appinfo-type">Consultation</span>
                                <span class="appinfo-dot"></span>
                                <span class="appinfo-form">Inclinic</span>
                            </div>
                        </div>
                        <div class="ius-ctrls">
                            <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                <img loading="lazy" src="~/assets/calendar.svg" width="18" height="20" alt="Calendar">
                            </a>
                            <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                <img loading="lazy" src="~/assets/delete.svg" width="18" height="20" alt="Cancel">
                            </a>
                        </div>
                    </div>
                    <div class="ius-foo">
                        <div class="ius-datetime">
                            <div class="datetime-label text-sb">Date & Time</div>
                            <div>1/3/2025 12:10:00</div>
                        </div>

                        <div class="ius-status">
                            <div class="ius-badge">Reschedule</div>
                        </div>
                    </div>
                </div>

                <div class="ius-gridrow">
                    <div class="ius-appbody">
                        <div class="ius-appinfo">
                            <h3>Dr. Sejal Saheta</h3>
                            <div class="ius-apptyfo">
                                <span class="appinfo-type">Consultation</span>
                                <span class="appinfo-dot"></span>
                                <span class="appinfo-form">Inclinic</span>
                            </div>
                        </div>
                        <div class="ius-ctrls">
                            <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                <img loading="lazy" src="~/assets/calendar.svg" width="18" height="20" alt="Calendar">
                            </a>
                            <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                <img loading="lazy" src="~/assets/delete.svg" width="18" height="20" alt="Cancel">
                            </a>
                        </div>
                    </div>
                    <div class="ius-foo">
                        <div class="ius-datetime">
                            <div class="datetime-label text-sb">Date & Time</div>
                            <div>1/3/2025 12:10:00</div>
                        </div>

                        <div class="ius-status">
                            <div class="ius-badge badge-green">Booked</div>
                        </div>
                    </div>
                </div>

                <div class="ius-gridrow">
                    <div class="ius-appbody">
                        <div class="ius-appinfo">
                            <h3>Dr. Sejal Saheta</h3>
                            <div class="ius-apptyfo">
                                <span class="appinfo-type">Consultation</span>
                                <span class="appinfo-dot"></span>
                                <span class="appinfo-form">Inclinic</span>
                            </div>
                        </div>
                        <div class="ius-ctrls">
                            <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                <img loading="lazy" src="~/assets/calendar.svg" width="18" height="20" alt="Calendar">
                            </a>
                            <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                <img loading="lazy" src="~/assets/delete.svg" width="18" height="20" alt="Cancel">
                            </a>
                        </div>
                    </div>
                    <div class="ius-foo">
                        <div class="ius-datetime">
                            <div class="datetime-label text-sb">Date & Time</div>
                            <div>1/3/2025 12:10:00</div>
                        </div>

                        <div class="ius-status">
                            <div class="ius-badge badge-red">Cancelled</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </main>
    <!-- Cancel Appointment - Modal -->
    <div class="modal fade" id="app-cancel">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">Cancel Appointment</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="CancelPatientId" name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="StatusIds" value="79" class="custom-field-height" />
                <div class="modal-body">
                    <div class="">
                        <label for="pi-Resason" class="form-label">Reason*</label>
                        <input type="Text" name="Resason" class="form-control form-date" maxlength="100" id="pi-Resason" />
                        <span id="Span-reson" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitCancel" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#SubmitCancel").click(function () {
                var appointmentId = $("#CancelPatientId").val();
                var statusId = $("#StatusIds").val();
                var reason = $("#pi-Resason").val().trim(); // Trim spaces

                if (reason === "") {
                    $("#Span-reson").text("Reason is required");
                    return; // Stop further execution
                } else {
                    $("#Span-reson").text(""); // Clear error if input is valid
                }

                var requestData = {
                    Id: appointmentId,
                    StatusId: statusId,
                    Comment: reason
                };

                $.ajax({
                    url: "/Patient/Index?handler=Pireschedule",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        localStorage.setItem("showCancelSuccessMessage", "true"); // Set flag before reload
                        location.reload(); // Reload page
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });
            });
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showCancelSuccessMessage") === "true") {
                    toastr.success("Appointment Cancelled successfully!"); // Show success message
                    localStorage.removeItem("showCancelSuccessMessage"); // Remove flag after showing message
                }
            });
            $(document).ready(function () {
                $('#app-cancel').on('hidden.bs.modal', function () {
                    $('#pi-Resason').val(''); // Input field ko empty karna
                    $('#Span-reson').text(''); // Span error message ko clear karna
                });
            });

        });
    </script>


    <!-- Reschedule Appointment - Modal -->
    <div class="modal fade" id="app-resched">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">Reschedule Appointment</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="AppoinmentId" name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="StatusId" value="77" name="medicalPatientSignature" class="custom-field-height" />
                <div class="modal-body">
                    <div class="">
                        <label for="pi-resched" class="form-label">Appointment Date Time*</label>
                        <ejs-datetimepicker id="pi-resched" step="15" min="DateTime.Now" style="height:45px;" format="@Model.EjsDateTimePattern" readonly></ejs-datetimepicker>
                        <span id="AptDatetime-reson" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitRescedule" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var OCModalEl = document.getElementById('app-resched');

            OCModalEl.addEventListener('hidden.bs.modal', function () {
                // Remove backdrop if exists
                let backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }

                // Reset DateTimePicker value
                let dateTimePicker = document.getElementById('pi-resched').ej2_instances[0];
                if (dateTimePicker) {
                    dateTimePicker.value = null;
                }

                // Clear error message
                document.getElementById('AptDatetime-reson').textContent = '';
            });
        });
    </script>
    <div class="modal fade" id="oConsultationModal">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">
                        Appointment Request for Online Consultation
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="OCAddPatientId" asp-for="PatientData.Id" name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="OCFormofAppointment" value="Appointment Request for Online Consultation" name="medicalPatientSignature" class="custom-field-height" />
                <div class="modal-body">
                    <div class="">
                        <label for="OC-resched" class="form-label">Appointment Date Time*</label>
                        <ejs-datetimepicker id="OC-resched" step="15" style="height:45px;" min="DateTime.Now" format="@Model.EjsDateTimePattern"></ejs-datetimepicker>

                        <span id="OC-reschedSpan" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitOnlineconsult" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            $('#oConsultationModal').on('hidden.bs.modal', function () {
                // Reset DateTime Picker
                var dateTimePicker = document.getElementById("OC-resched").ej2_instances[0];
                if (dateTimePicker) {
                    dateTimePicker.value = null; // Clear the selected value
                    dateTimePicker.refresh(); // Refresh the DateTimePicker UI
                }

                // Clear error message
                $('#OC-reschedSpan').text('');
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            $("#SubmitOnlineconsult").click(function () {
                var $button = $(this); // Button ko reference karna
                $button.prop("disabled", true).text("Submitting..."); // Button disable aur text change karein

                var patietId = $("#AddPatientId").val();
                // var formofappt = $("#app-form").val();
                var FormofAppointment = $("#OCFormofAppointment").val();
                var appointmentDateTime = $("#OC-resched").val();
                var selectedDate = appointmentDateTime;
                var currentDate = new Date(); // Current date-time
                var formattedCurrentDate = formatDate(currentDate); // Format the current date
                var isValid = true;


                var dateTimeRegex = /^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2} [APap][Mm]$/; // Format: dd/MM/yyyy hh:mm:ss AM/PM
                var currentDateTime = new Date();
                var enteredDateTime;

                if (appointmentDateTime === "") {
                    $("#OC-reschedSpan").text("Appointment Date Time is required.");
                    isValid = false;
                } else if (!dateTimeRegex.test(appointmentDateTime)) {
                    $("#OC-reschedSpan").text("Invalid Appointment Date Time format.");
                    isValid = false;
                } else {
                    // Convert to Date object
                    var parts = appointmentDateTime.split(" ");
                    var dateParts = parts[0].split("/");
                    var timeParts = parts[1].split(":");
                    var meridian = parts[2];

                    var hours = parseInt(timeParts[0], 10);
                    var maxDateTime = new Date();
                    maxDateTime.setFullYear(maxDateTime.getFullYear() + 10); // Max 10 years allowed


                    if (meridian.toUpperCase() === "PM" && hours !== 12) {
                        hours += 12;
                    } else if (meridian.toUpperCase() === "AM" && hours === 12) {
                        hours = 0;
                    }

                    enteredDateTime = new Date(
                        dateParts[2], // Year
                        dateParts[1] - 1, // Month (0-based index)
                        dateParts[0], // Day
                        hours,
                        parseInt(timeParts[1], 10),
                        parseInt(timeParts[2], 10)
                    );
                    // ❌ Check if the selected date is Saturday (6) or Sunday (0)
                    var startHour = 10;
                    var endHour = 19;

                    var enteredHour = enteredDateTime.getHours();
                    var enteredMinutes = enteredDateTime.getMinutes();
                    var day = parseInt(dateParts[0], 10);
                    var month = parseInt(dateParts[1], 10);
                    var year = parseInt(dateParts[2], 10);

                    if (enteredDateTime > maxDateTime) { // ✅ Check max 10 years condition
                        $("#OC-reschedSpan").text("Appointment Date Time cannot be more than 10 years from today.");
                        isValid = false;
                    }
                    // Validate month and date range
                    else if (month < 1 || month > 12 || day < 1 || day > 31) {
                        $("#OC-reschedSpan").text("Invalid Appointment Date Time.");
                        isValid = false;
                    }

                    else if (enteredDateTime == "Invalid Date" || enteredDateTime < currentDateTime) {
                        $("#OC-reschedSpan").text("Invalid Appointment Date Time.");
                        isValid = false;
                    }
                    else if (enteredDateTime.getDay() === 0 || enteredDateTime.getDay() === 6) {

                        $("#OC-reschedSpan").text("Appointments cannot be scheduled on weekends.");
                        isValid = false;
                    } else if (enteredHour < startHour || (enteredHour === endHour && enteredMinutes > 0) || enteredHour > endHour) {
                        $("#OC-reschedSpan").text("Appointment time should be between 10 AM and 7 PM.");
                        isValid = false;
                    }
                    else {
                        $("#OC-reschedSpan").text("");
                    }
                }

                if (!isValid) {
                    $button.prop("disabled", false).text("Save");
                    return;
                }
                var formattedDate = convertDateFormat(appointmentDateTime);


                var requestData = {
                    PatientId: patietId,
                    AppointmentStartTime: formattedDate,
                    FormofAppointment: FormofAppointment
                };

                $.ajax({
                    url: "/Patient/Index?handler=AddAppointmentRequest",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        if (!response.isSuccess) {
                            $("#OC-reschedSpan").text(response.errorMessage).show();
                            $button.prop("disabled", false).text("Save");
                        }
                        else {
                            localStorage.setItem("showSuccessMessage", "true"); // Set flag before reload
                            location.reload(); // Reload page
                        }
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });

            });
            function convertDateFormat(dateString) {
                var parts = dateString.split(/[\s/:]+/); // Split date and time
                var day = parts[0];
                var month = parts[1];
                var year = parts[2];
                var hours = parseInt(parts[3]);
                var minutes = parts[4];
                var seconds = parts[5];
                var meridian = parts[6];

                // Convert 12-hour format to 24-hour format
                if (meridian === "PM" && hours !== 12) {
                    hours += 12;
                } else if (meridian === "AM" && hours === 12) {
                    hours = 0;
                }

                // Format into "YYYY-MM-DD HH:mm:ss"
                return `${year}-${month}-${day} ${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            }
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showSuccessMessage") === "true") {
                    toastr.success("Appointment Added successfully!"); // Show success message
                    localStorage.removeItem("showSuccessMessage"); // Remove flag after showing message
                }
            });
            function formatDate(date) {
                var dd = String(date.getDate()).padStart(2, '0');
                var MM = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
                var yyyy = date.getFullYear();

                var hours = date.getHours();
                var minutes = String(date.getMinutes()).padStart(2, '0');
                var seconds = String(date.getSeconds()).padStart(2, '0');
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format

                return `${dd}/${MM}/${yyyy} ${hours}:${minutes}:${seconds} ${ampm}`;
            }

            // Function to parse dd/MM/yyyy hh:mm:ss a string to Date object
            function parseDate(dateStr) {
                var parts = dateStr.split(/[\s/:]+/); // Split by space, slash, or colon
                var dd = parseInt(parts[0], 10);
                var MM = parseInt(parts[1], 10) - 1; // Months are zero-based
                var yyyy = parseInt(parts[2], 10);
                var hours = parseInt(parts[3], 10);
                var minutes = parseInt(parts[4], 10);
                var seconds = parseInt(parts[5], 10);
                var ampm = parts[6];

                if (ampm === 'PM' && hours < 12) hours += 12;
                if (ampm === 'AM' && hours === 12) hours = 0;

                return new Date(yyyy, MM, dd, hours, minutes, seconds);
            }

        });

    </script>
    <div class="modal fade" id="cosmeticProcModel">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">Appointment Request for Procedures</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="RPAddPatientId" asp-for="PatientData.Id" name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="RPFormofAppointment" value="Appointment Request for Procedures" name="medicalPatientSignature" class="custom-field-height" />

                <div class="modal-body">
                    <div class="">
                        <label for="RP-resched" class="form-label">Appointment Date Time*</label>
                        <ejs-datetimepicker id="RP-resched" step="15" min="DateTime.Now" style="height:45px;" format="@Model.EjsDateTimePattern"></ejs-datetimepicker>
                        <span id="RP-reschedSpan" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitProceduresReuest" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            $('#cosmeticProcModel').on('hidden.bs.modal', function () {
                // Reset DateTime Picker
                var dateTimePicker = document.getElementById("RP-resched").ej2_instances[0];
                if (dateTimePicker) {
                    dateTimePicker.value = null; // Clear the selected value
                    dateTimePicker.refresh(); // Refresh the DateTimePicker UI

                }

                // Clear error message
                $('#RP-reschedSpan').text('');
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            $("#SubmitProceduresReuest").click(function () {
                var $button = $(this); // Button ko reference karna
                $button.prop("disabled", true).text("Submitting..."); // Button disable aur text change karein

                var patietId = $("#RPAddPatientId").val();
                // var formofappt = $("#app-form").val();
                var FormofAppointment = $("#RPFormofAppointment").val();
                var appointmentDateTime = $("#RP-resched").val();
                var selectedDate = appointmentDateTime;
                var currentDate = new Date(); // Current date-time
                var formattedCurrentDate = formatDate(currentDate); // Format the current date
                var isValid = true;

                var dateTimeRegex = /^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2} [APap][Mm]$/; // Format: dd/MM/yyyy hh:mm:ss AM/PM
                var currentDateTime = new Date();
                var enteredDateTime;

                if (appointmentDateTime === "") {

                    $("#RP-reschedSpan").text("Appointment Date Time is required.");
                    isValid = false;
                } else if (!dateTimeRegex.test(appointmentDateTime)) {
                    $("#RP-reschedSpan").text("Invalid Appointment Date Time format.");
                    isValid = false;
                } else {
                    // Convert to Date object
                    var parts = appointmentDateTime.split(" ");
                    var dateParts = parts[0].split("/");
                    var timeParts = parts[1].split(":");
                    var meridian = parts[2];

                    var hours = parseInt(timeParts[0], 10);
                    var maxDateTime = new Date();
                    maxDateTime.setFullYear(maxDateTime.getFullYear() + 10); // Max 10 years allowed


                    if (meridian.toUpperCase() === "PM" && hours !== 12) {
                        hours += 12;
                    } else if (meridian.toUpperCase() === "AM" && hours === 12) {
                        hours = 0;
                    }

                    enteredDateTime = new Date(
                        dateParts[2], // Year
                        dateParts[1] - 1, // Month (0-based index)
                        dateParts[0], // Day
                        hours,
                        parseInt(timeParts[1], 10),
                        parseInt(timeParts[2], 10)
                    );
                    // ❌ Check if the selected date is Saturday (6) or Sunday (0)
                    var startHour = 10;
                    var endHour = 19;

                    var enteredHour = enteredDateTime.getHours();
                    var enteredMinutes = enteredDateTime.getMinutes();
                    var day = parseInt(dateParts[0], 10);
                    var month = parseInt(dateParts[1], 10);
                    var year = parseInt(dateParts[2], 10);
                    // Validate month and date range

                    if (enteredDateTime > maxDateTime) { // ✅ Check max 10 years condition
                        $("#RP-reschedSpan").text("Appointment Date Time cannot be more than 10 years from today.");
                        isValid = false;
                    } else if (month < 1 || month > 12 || day < 1 || day > 31) {
                        $("#RP-reschedSpan").text("Invalid Appointment Date Time.");
                        isValid = false;
                    }

                    else if (enteredDateTime == "Invalid Date" || enteredDateTime < currentDateTime) {
                        $("#RP-reschedSpan").text("Invalid Appointment Date Time.");
                        isValid = false;
                    }
                    else if (enteredDateTime.getDay() === 0 || enteredDateTime.getDay() === 6) {

                        $("#RP-reschedSpan").text("Appointments cannot be scheduled on weekends.");
                        isValid = false;
                    } else if (enteredHour < startHour || (enteredHour === endHour && enteredMinutes > 0) || enteredHour > endHour) {
                        $("#RP-reschedSpan").text("Appointment time should be between 10 AM and 7 PM.");
                        isValid = false;
                    }
                    else {
                        $("#RP-reschedSpan").text("");
                    }
                }
                if (!isValid) {
                    $button.prop("disabled", false).text("Save");
                    return;
                }
                var formattedDate = convertDateFormat(appointmentDateTime);


                var requestData = {
                    PatientId: patietId,
                    AppointmentStartTime: formattedDate,
                    FormofAppointment: FormofAppointment
                };

                $.ajax({
                    url: "/Patient/Index?handler=AddAppointmentRequest",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {

                        if (!response.isSuccess) {
                            $("#RP-reschedSpan").text(response.errorMessage).show();
                            $button.prop("disabled", false).text("Save");
                        }
                        else {
                            localStorage.setItem("showSuccessMessage", "true"); // Set flag before reload
                            location.reload(); // Reload page
                        }
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });

            });
            function convertDateFormat(dateString) {
                var parts = dateString.split(/[\s/:]+/); // Split date and time
                var day = parts[0];
                var month = parts[1];
                var year = parts[2];
                var hours = parseInt(parts[3]);
                var minutes = parts[4];
                var seconds = parts[5];
                var meridian = parts[6];

                // Convert 12-hour format to 24-hour format
                if (meridian === "PM" && hours !== 12) {
                    hours += 12;
                } else if (meridian === "AM" && hours === 12) {
                    hours = 0;
                }

                // Format into "YYYY-MM-DD HH:mm:ss"
                return `${year}-${month}-${day} ${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            }
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showSuccessMessage") === "true") {
                    toastr.success("Appointment Added successfully!"); // Show success message
                    localStorage.removeItem("showSuccessMessage"); // Remove flag after showing message
                }
            });
            function formatDate(date) {
                var dd = String(date.getDate()).padStart(2, '0');
                var MM = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
                var yyyy = date.getFullYear();

                var hours = date.getHours();
                var minutes = String(date.getMinutes()).padStart(2, '0');
                var seconds = String(date.getSeconds()).padStart(2, '0');
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format

                return `${dd}/${MM}/${yyyy} ${hours}:${minutes}:${seconds} ${ampm}`;
            }

            // Function to parse dd/MM/yyyy hh:mm:ss a string to Date object
            function parseDate(dateStr) {
                var parts = dateStr.split(/[\s/:]+/); // Split by space, slash, or colon
                var dd = parseInt(parts[0], 10);
                var MM = parseInt(parts[1], 10) - 1; // Months are zero-based
                var yyyy = parseInt(parts[2], 10);
                var hours = parseInt(parts[3], 10);
                var minutes = parseInt(parts[4], 10);
                var seconds = parseInt(parts[5], 10);
                var ampm = parts[6];

                if (ampm === 'PM' && hours < 12) hours += 12;
                if (ampm === 'AM' && hours === 12) hours = 0;

                return new Date(yyyy, MM, dd, hours, minutes, seconds);
            }

        });

    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var OCModalEl = document.getElementById('oConsultationModal');

            OCModalEl.addEventListener('hidden.bs.modal', function () {
                let backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }
            });
        });

    </script>
    <div class="modal fade" id="schedulerModal" tabindex="-1" aria-labelledby="schedulerModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="schedulerModalLabel">Doctor Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="control-section">
                        <div class="schedule-wrapper">
                            <ejs-schedule id="schedulerss" height="100%" width="100%"
                                          selectedDate="DateTime.Today"
                                          allowDragAndDrop="false" allowResizing="false"
                                          startHour="10:00" endHour="19:15"
                                          workDays="new int[] {1, 2, 3, 4, 5}"
                                          cellClick="onCellClick" showQuickInfo="false">
                                <e-schedule-views>
                                    <e-schedule-view option="Day"></e-schedule-view>
                                    <e-schedule-view option="Week"></e-schedule-view>
                                </e-schedule-views>
                                <e-schedule-timescale interval="15" slotCount="1"></e-schedule-timescale>

                                <e-schedule-eventsettings dataSource="Model.Doctorblocktime" template="#blockTemplate"></e-schedule-eventsettings>
                            </ejs-schedule>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            $('#schedulerModal').on('shown.bs.modal', function () {
                loadSchedulerData(); // Modal open hone par function call hoga
            });
        });

        function loadSchedulerData() {
            var doctorBlockTimes = @Html.Raw(Json.Serialize(Model.Doctorblocktime));
            var holidays = @Html.Raw(Json.Serialize(Model.Holidays));
            var holidayDates = holidays.map(function (item) {
                return new Date(item.startDate).toISOString().split('T')[0]; // Convert to YYYY-MM-DD
            });
            if (!doctorBlockTimes || doctorBlockTimes.length === 0) {
                console.log("No blocked appointments found.");
                return;
            } else {
                console.log("Blocked Appointments:", doctorBlockTimes);
            }

            setTimeout(function () {
                var scheduleObj = document.getElementById('schedulerss')?.ej2_instances?.[0];

                if (!scheduleObj) {
                    console.error("Scheduler instance not found.");
                    return;
                }
                scheduleObj.renderCell = function (args) {
                    if (args.elementType === "workCells" || args.elementType === "monthCells") {
                        var cellDate = args.date.toISOString().split('T')[0]; // Get YYYY-MM-DD format
                        if (holidayDates.includes(cellDate)) {
                            args.element.classList.add("e-disabled", "holiday-cell"); // Apply custom class
                        }
                    }
                };
                // Convert data to Scheduler format
                var blockAppointments = doctorBlockTimes.map(function (item) {
                    return {
                        Id: item.id,
                        Subject: 'Not available',
                        StartTime: new Date(item.appointmentStartTime),
                        EndTime: new Date(item.appointmentEndDateTime),
                        IsReadonly: true,
                        ClassName: "blocked-slot" // Apply CSS for styling
                    };
                });

                console.log("Final Event Data for Scheduler:", blockAppointments);

                // Reset scheduler and load new data
                scheduleObj.eventSettings.dataSource = [];
                scheduleObj.refresh(); // First refresh to clear old data

                setTimeout(() => {
                    scheduleObj.eventSettings.dataSource = blockAppointments;
                    scheduleObj.refresh(); // Second refresh to load new data
                }, 300); // Small delay to prevent UI issues

            }, 500);
        }

    </script>

    <script>
        function onPopupOpen(args) {
            // Quick popup open hone se rokna
            if (args.type === "QuickInfo") {
                args.cancel = true;
            }
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var scheduleObj = document.getElementById('schedulerss').ej2_instances[0];

            scheduleObj.popupOpen = function (args) {
                if (args.type === "Editor" && args.data.Id === undefined) {
                    args.cancel = true; // Disable double-click popup (event creation popup)
                }
            };
        });
    </script>


    <script>
        function onCellClick(args) {
            // Prevent default popup behavior
            args.cancel = true;

            var currentDateTime = new Date(); // Current Date & Time
            var clickedDateTime = new Date(args.startTime); // Clicked Cell Date & Time

            // अगर क्लिक किया गया datetime past है तो event रोक दो
            if (clickedDateTime < currentDateTime) {
                alert("You cannot select this time or date for appointments.");
                return; // Stop execution (No further action)
            }

            var clickedDate = new Date(args.startTime);
            var day = clickedDate.getDay(); // 0 = Sunday, 6 = Saturday

            // अगर क्लिक किया गया दिन Saturday या Sunday है तो क्लिक disable कर दो
            if (day === 0 || day === 6) {
                args.cancel = true; // Click event cancel करो
                return;
            }

            // Get the clicked slot's start time
            let startTime = args.startTime;

            // Convert to ISO 8601 format (YYYY-MM-DDTHH:MM:SS.SSSZ)
            let formattedTime = startTime.toISOString();

            // **Step 1:** `schedulerModal` को बंद करना
            var schedulerModalEl = document.getElementById('schedulerModal');
            var schedulerModal = bootstrap.Modal.getInstance(schedulerModalEl);
            if (schedulerModal) {
                schedulerModal.hide();
            }

            // **Step 2:** `schedulerModal` से जुड़ा modal-backdrop हटाना
            schedulerModalEl.addEventListener('hidden.bs.modal', function () {
                let backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove(); // सिर्फ `schedulerModal` का backdrop हटाएगा
                }
            });

            // **Step 3:** Reschedule Appointment Modal (`app-resched`) खोलना
            var rescheduleModal = new bootstrap.Modal(document.getElementById('app-resched'));
            rescheduleModal.show();

            // **Step 4:** Selected Date Time को ejs-datetimepicker में सेट करना
            var dateTimePicker = document.getElementById("pi-resched").ej2_instances[0];
            dateTimePicker.value = new Date(startTime);
        }



    </script>







    <!-- Template to show "Book" on blocked slots -->
    <script id="blockTemplate" type="text/x-template">
        <div class="blocked-slot">Not available</div>
    </script>









    <!-- JavaScript to Open Modal -->
    <script>
        function openSchedulerPopup() {
            var modal = new bootstrap.Modal(document.getElementById('schedulerModal'));
            modal.show();
        }
    </script>


    <!-- Second Scheduler Modal -->
    <div class="modal fade" id="schedulerModal2" tabindex="-1" aria-labelledby="schedulerModalLabel2" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="schedulerModalLabel">Doctor Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="control-section">
                        <div class="schedule-wrapper">
                            <ejs-schedule id="schedulerss2" height="100%" width="100%"
                                          selectedDate="DateTime.Today"
                                          allowDragAndDrop="false" allowResizing="false"
                                          startHour="10:00" endHour="19:15"
                                          workDays="new int[] {1, 2, 3, 4, 5}"
                                          cellClick="onCellClick2" showQuickInfo="false">
                                <e-schedule-views>
                                    <e-schedule-view option="Day"></e-schedule-view>
                                    <e-schedule-view option="Week"></e-schedule-view>
                                </e-schedule-views>
                                <e-schedule-timescale interval="15" slotCount="1"></e-schedule-timescale>
                                <e-schedule-eventsettings dataSource="@Model.Doctorblocktime" template="#blockTemplate2"></e-schedule-eventsettings>
                            </ejs-schedule>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- JavaScript to Handle Both Modals -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {

            $('#schedulerModal2').on('shown.bs.modal', function () {
                loadSchedulerData2('schedulerss2'); // Load data for second modal
            });
        });

        function loadSchedulerData2(schedulerId) {
            debugger;
            var doctorBlockTimes = @Html.Raw(Json.Serialize(Model.Doctorblocktime));
            var holidays = @Html.Raw(Json.Serialize(Model.Holidays));
            var holidayDates = holidays.map(function (item) {
                return new Date(item.startDate).toISOString().split('T')[0]; // Convert to YYYY-MM-DD
            });


            if (!doctorBlockTimes || doctorBlockTimes.length === 0) {
                console.log("No blocked appointments found.");
                return;
            } else {
                console.log("Blocked Appointments:", doctorBlockTimes);
            }

            setTimeout(function () {
                var scheduleObj = document.getElementById(schedulerId)?.ej2_instances?.[0];

                if (!scheduleObj) {
                    console.error("Scheduler instance not found.");
                    return;
                }
                scheduleObj.renderCell = function (args) {
                    if (args.elementType === "workCells" || args.elementType === "monthCells") {
                        var cellDate = args.date.toISOString().split('T')[0]; // Get YYYY-MM-DD format
                        if (holidayDates.includes(cellDate)) {
                            args.element.classList.add("e-disabled", "holiday-cell"); // Apply custom class
                        }
                    }
                };
                // Convert data to Scheduler format
                var blockAppointments = doctorBlockTimes.map(function (item) {
                    return {
                        Id: item.doctorId,
                        Subject: 'Not available',
                        StartTime: new Date(item.appointmentStartTime),
                        EndTime: new Date(item.appointmentEndDateTime),
                        IsReadonly: true,
                        ClassName: "blocked-slot"
                    };
                });


                console.log("Final Event Data for Scheduler:", blockAppointments);

                // Reset scheduler and load new data
                scheduleObj.eventSettings.dataSource = [];
                scheduleObj.refresh();

                setTimeout(() => {
                    scheduleObj.eventSettings.dataSource = blockAppointments;
                    scheduleObj.refresh();
                }, 300);

            }, 500);
        }

        // Prevents quick popup opening
        function onPopupOpen(args) {
            if (args.type === "QuickInfo") {
                args.cancel = true;
            }
        }



        document.addEventListener('DOMContentLoaded', function () {
            var scheduleObj2 = document.getElementById('schedulerss2').ej2_instances[0];

            if (scheduleObj2) {
                scheduleObj2.popupOpen = function (args) {
                    if (args.type === "Editor" && args.data.Id === undefined) {
                        args.cancel = true;
                    }
                };
            }

            if (scheduleObj2) {
                scheduleObj2.popupOpen = function (args) {
                    if (args.type === "Editor" && args.data.Id === undefined) {
                        args.cancel = true;
                    }
                };
            }
        });


        function onCellClick2(args) {
            handleCellClick(args, 'schedulerModal2');
        }

        function handleCellClick(args, modalId) {
            args.cancel = true;
            var currentDateTime = new Date();
            var clickedDateTime = new Date(args.startTime);

            if (clickedDateTime < currentDateTime) {
                alert("You cannot select this time or date for appointments.");
                return;
            }

            var clickedDate = new Date(args.startTime);
            var day = clickedDate.getDay();

            if (day === 0 || day === 6) {
                args.cancel = true;
                return;
            }

            let startTime = args.startTime;
            let formattedTime = startTime.toISOString();

            var schedulerModalEl = document.getElementById(modalId);
            var schedulerModal = bootstrap.Modal.getInstance(schedulerModalEl);
            if (schedulerModal) {
                schedulerModal.hide();
            }

            schedulerModalEl.addEventListener('hidden.bs.modal', function () {
                let backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }
            });

            var rescheduleModal = new bootstrap.Modal(document.getElementById('app-add'));
            rescheduleModal.show();

            var dateTimePicker = document.getElementById("app-datetim").ej2_instances[0];
            dateTimePicker.value = new Date(startTime);
        }
    </script>
    <script>
        $('#schedulerModal2').on('shown.bs.modal', function () {
            loadSchedulerData2('schedulerss2');
            setTimeout(() => {
                var scheduleObj = document.getElementById('schedulerss2').ej2_instances[0];
                if (scheduleObj) {
                    if (window.innerWidth <= 768) { // Mobile View Condition
                        scheduleObj.timeScale = {
                            enable: true,
                            interval: 15,
                            slotCount: 1
                        };

                        scheduleObj.currentView = 'Day'; // Force Day View
                        scheduleObj.refreshLayout(); // Adaptive layout refresh
                    }
                }
            }, 500); // Thoda delay dena important hai modal ke liye
        });

    </script>
    <!-- Blocked Slot Template -->
    <script id="blockTemplate2" type="text/x-template">
        <div class="blocked-slot2">Not available</div>
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#SubmitRescedule").click(function () {
                var $button = $(this); // Button ko reference karna
                $button.prop("disabled", true).text("Submitting..."); // Button disable aur text change karein
                var isValid = true;
                var appointmentId = $("#AppoinmentId").val();
                var statusId = $("#StatusId").val();
                var appointmentDateTime = $("#pi-resched").val();
                var selectedDate = appointmentDateTime;
                var currentDate = new Date(); // Current date-time
                var formattedCurrentDate = formatDate(currentDate); // Format the current date
                var dateTimeRegex = /^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2} [APap][Mm]$/; // Format: dd/MM/yyyy hh:mm:ss AM/PM
                var currentDateTime = new Date();
                var enteredDateTime;

                if (appointmentDateTime === "") {
                    $("#AptDatetime-reson").text("Appointment Date Time is required.");
                    return; // Stop further execution
                }
                else if (!dateTimeRegex.test(appointmentDateTime)) {
                    $("#AptDatetime-reson").text("Invalid Appointment Date Time format.");
                    isValid = false;
                } else {
                    // Convert to Date object
                    var parts = appointmentDateTime.split(" ");
                    var dateParts = parts[0].split("/");
                    var timeParts = parts[1].split(":");
                    var meridian = parts[2];

                    var hours = parseInt(timeParts[0], 10);


                    if (meridian.toUpperCase() === "PM" && hours !== 12) {
                        hours += 12;
                    } else if (meridian.toUpperCase() === "AM" && hours === 12) {
                        hours = 0;
                    }

                    enteredDateTime = new Date(
                        dateParts[2], // Year
                        dateParts[1] - 1, // Month (0-based index)
                        dateParts[0], // Day
                        hours,
                        parseInt(timeParts[1], 10),
                        parseInt(timeParts[2], 10)
                    );
                    // ❌ Check if the selected date is Saturday (6) or Sunday (0)
                    var startHour = 10;
                    var endHour = 19;

                    var enteredHour = enteredDateTime.getHours();
                    var enteredMinutes = enteredDateTime.getMinutes();


                    if (enteredDateTime == "Invalid Date" || enteredDateTime < currentDateTime) {
                        $("#AptDatetime-reson").text("Invalid Appointment Date Time.");
                        isValid = false;
                    }
                    else if (enteredDateTime.getDay() === 0 || enteredDateTime.getDay() === 6) {

                        $("#AptDatetime-reson").text("Appointments cannot be scheduled on weekends.");
                        isValid = false;
                    } else if (enteredHour < startHour || (enteredHour === endHour && enteredMinutes > 0) || enteredHour > endHour) {
                        $("#AptDatetime-reson").text("Appointment time should be between 10 AM and 7 PM.");
                        isValid = false;
                    }
                    else {
                        $("#AptDatetime-reson").text("");
                    }
                }
                if (!isValid) {
                    $button.prop("disabled", false).text("Save");
                    return;
                }
                var formattedDate = convertDateFormat(appointmentDateTime);


                var requestData = {
                    Id: appointmentId,
                    StatusId: statusId,
                    AppointmentStartTime: formattedDate
                };

                $.ajax({
                    url: "/Patient/Index?handler=Pireschedule",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        localStorage.setItem("showRescheduleSuccessMessage", "true"); // Set flag before reload
                        location.reload(); // Reload page
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });
            });
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showRescheduleSuccessMessage") === "true") {
                    toastr.success("Appointment Rescheduled successfully!"); // Show success message
                    localStorage.removeItem("showRescheduleSuccessMessage"); // Remove flag after showing message
                }
            });
            function convertDateFormat(dateString) {
                var parts = dateString.split(/[\s/:]+/); // Split date and time
                var day = parts[0];
                var month = parts[1];
                var year = parts[2];
                var hours = parseInt(parts[3]);
                var minutes = parts[4];
                var seconds = parts[5];
                var meridian = parts[6];

                // Convert 12-hour format to 24-hour format
                if (meridian === "PM" && hours !== 12) {
                    hours += 12;
                } else if (meridian === "AM" && hours === 12) {
                    hours = 0;
                }

                // Format into "YYYY-MM-DD HH:mm:ss"
                return `${year}-${month}-${day} ${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            }
            function formatDate(date) {
                var dd = String(date.getDate()).padStart(2, '0');
                var MM = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
                var yyyy = date.getFullYear();

                var hours = date.getHours();
                var minutes = String(date.getMinutes()).padStart(2, '0');
                var seconds = String(date.getSeconds()).padStart(2, '0');
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format

                return `${dd}/${MM}/${yyyy} ${hours}:${minutes}:${seconds} ${ampm}`;
            }

            // Function to parse dd/MM/yyyy hh:mm:ss a string to Date object
            function parseDate(dateStr) {
                var parts = dateStr.split(/[\s/:]+/); // Split by space, slash, or colon
                var dd = parseInt(parts[0], 10);
                var MM = parseInt(parts[1], 10) - 1; // Months are zero-based
                var yyyy = parseInt(parts[2], 10);
                var hours = parseInt(parts[3], 10);
                var minutes = parseInt(parts[4], 10);
                var seconds = parseInt(parts[5], 10);
                var ampm = parts[6];

                if (ampm === 'PM' && hours < 12) hours += 12;
                if (ampm === 'AM' && hours === 12) hours = 0;

                return new Date(yyyy, MM, dd, hours, minutes, seconds);
            }

        });

    </script>



    <!-- Add Appointment - Modal -->
    <div class="modal fade" id="app-add">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">
                        Appointment for Consultation
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="AddPatientId" asp-for="PatientData.Id" name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="ACFormofAppointment" value="Appointment for Consultation" name="medicalPatientSignature" class="custom-field-height" />

                <div class="modal-body">
                    <div class="">
                        <label for="OC-resched" class="form-label">Appointment Date Time*</label>
                        <ejs-datetimepicker id="app-datetim" step="15" min="DateTime.Now" style="height:45px;" format="@Model.EjsDateTimePattern" readonly></ejs-datetimepicker>
                        <span id="AptDatetimereson1" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitAppointment" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var rescheduleModalEladd = document.getElementById('app-add');

            rescheduleModalEladd.addEventListener('hidden.bs.modal', function () {
                // Remove modal backdrop if exists
                let backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }

                // Reset DateTimePicker value
                let dateTimePicker = document.getElementById('app-datetim');
                if (dateTimePicker && dateTimePicker.ej2_instances) {
                    dateTimePicker.ej2_instances[0].value = null;
                }

                // Clear error message span
                document.getElementById('AptDatetimereson1').innerText = '';
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#SubmitAppointment").click(function () {
                var $button = $(this); // Button ko reference karna
                $button.prop("disabled", true).text("Submitting..."); // Button disable aur text change karein
                var patietId = $("#AddPatientId").val();
                // var formofappt = $("#app-form").val();
                var appointmentDateTime = $("#app-datetim").val();
                var FormofAppointment = $("#ACFormofAppointment").val();
                var selectedDate = appointmentDateTime;
                var currentDate = new Date(); // Current date-time
                var formattedCurrentDate = formatDate(currentDate); // Format the current date
                var isValid = true;
                var dateTimeRegex = /^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2} [APap][Mm]$/; // Format: dd/MM/yyyy hh:mm:ss AM/PM
                var currentDateTime = new Date();
                var enteredDateTime;

                if (appointmentDateTime === "") {
                    $("#AptDatetimereson1").text("Appointment Date Time is required.");
                    isValid = false; // Stop further execution
                } else if (!dateTimeRegex.test(appointmentDateTime)) {
                    $("#AptDatetime-reson").text("Invalid Appointment Date Time format.");
                    isValid = false;
                } else {
                    // Convert to Date object
                    var parts = appointmentDateTime.split(" ");
                    var dateParts = parts[0].split("/");
                    var timeParts = parts[1].split(":");
                    var meridian = parts[2];

                    var hours = parseInt(timeParts[0], 10);


                    if (meridian.toUpperCase() === "PM" && hours !== 12) {
                        hours += 12;
                    } else if (meridian.toUpperCase() === "AM" && hours === 12) {
                        hours = 0;
                    }

                    enteredDateTime = new Date(
                        dateParts[2], // Year
                        dateParts[1] - 1, // Month (0-based index)
                        dateParts[0], // Day
                        hours,
                        parseInt(timeParts[1], 10),
                        parseInt(timeParts[2], 10)
                    );
                    // ❌ Check if the selected date is Saturday (6) or Sunday (0)
                    var startHour = 10;
                    var endHour = 19;

                    var enteredHour = enteredDateTime.getHours();
                    var enteredMinutes = enteredDateTime.getMinutes();


                    if (enteredDateTime == "Invalid Date" || enteredDateTime < currentDateTime) {
                        $("#AptDatetimereson1").text("Invalid Appointment Date Time.");
                        isValid = false;
                    }
                    else if (enteredDateTime.getDay() === 0 || enteredDateTime.getDay() === 6) {

                        $("#AptDatetimereson1").text("Appointments cannot be scheduled on weekends.");
                        isValid = false;
                    } else if (enteredHour < startHour || (enteredHour === endHour && enteredMinutes > 0) || enteredHour > endHour) {
                        $("#AptDatetimereson1").text("Appointment time should be between 10 AM and 7 PM.");
                        isValid = false;
                    }
                    else {
                        $("#AptDatetimereson1").text("");
                    }
                }

                if (!isValid) {
                    $button.prop("disabled", false).text("Save");
                    return;
                }
                var formattedDate = convertDateFormat(appointmentDateTime);


                var requestData = {
                    PatientId: patietId,
                    AppointmentStartTime: formattedDate,
                    FormofAppointment: FormofAppointment
                };

                $.ajax({
                    url: "/Patient/Index?handler=Addaptall",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        localStorage.setItem("showSuccessMessage", "true"); // Set flag before reload
                        location.reload(); // Reload page
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });

            });
            function convertDateFormat(dateString) {
                var parts = dateString.split(/[\s/:]+/); // Split date and time
                var day = parts[0];
                var month = parts[1];
                var year = parts[2];
                var hours = parseInt(parts[3]);
                var minutes = parts[4];
                var seconds = parts[5];
                var meridian = parts[6];

                // Convert 12-hour format to 24-hour format
                if (meridian === "PM" && hours !== 12) {
                    hours += 12;
                } else if (meridian === "AM" && hours === 12) {
                    hours = 0;
                }

                // Format into "YYYY-MM-DD HH:mm:ss"
                return `${year}-${month}-${day} ${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            }
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showSuccessMessage") === "true") {
                    toastr.success("Appointment Added successfully!"); // Show success message
                    localStorage.removeItem("showSuccessMessage"); // Remove flag after showing message
                }
            });
            function formatDate(date) {
                var dd = String(date.getDate()).padStart(2, '0');
                var MM = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
                var yyyy = date.getFullYear();

                var hours = date.getHours();
                var minutes = String(date.getMinutes()).padStart(2, '0');
                var seconds = String(date.getSeconds()).padStart(2, '0');
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format

                return `${dd}/${MM}/${yyyy} ${hours}:${minutes}:${seconds} ${ampm}`;
            }

            // Function to parse dd/MM/yyyy hh:mm:ss a string to Date object
            function parseDate(dateStr) {
                var parts = dateStr.split(/[\s/:]+/); // Split by space, slash, or colon
                var dd = parseInt(parts[0], 10);
                var MM = parseInt(parts[1], 10) - 1; // Months are zero-based
                var yyyy = parseInt(parts[2], 10);
                var hours = parseInt(parts[3], 10);
                var minutes = parseInt(parts[4], 10);
                var seconds = parseInt(parts[5], 10);
                var ampm = parts[6];

                if (ampm === 'PM' && hours < 12) hours += 12;
                if (ampm === 'AM' && hours === 12) hours = 0;

                return new Date(yyyy, MM, dd, hours, minutes, seconds);
            }

        });

    </script>
    <script src="./js/jquery.min.js"></script>
    <script src="./js/bootstrap.bundle.min.js"></script>
    <script src="./js/custom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


</body>
</html>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var gender = "@Model.PatientData.Gender"; // Server se value leke aayenge

        if (gender === "Male") {
            document.getElementById("gender-male").checked = true;
        } else if (gender === "Female") {
            document.getElementById("gender-female").checked = true;
        } else if (gender === "Other") {
            document.getElementById("gender-other").checked = true;
        }
    });
</script>
<script>
    document.getElementById('pi-age').addEventListener('input', function (e) {
        let value = e.target.value;
        if (value.length > 2) {
            e.target.value = value.slice(0, 2); // Sirf 2 characters allow karega
        }
    });

    document.getElementById('pi-name').addEventListener('input', function (e) {
        let value = e.target.value;
        let regex = /^[A-Za-z\s]*$/; // Sirf characters aur space allow karega
        if (!regex.test(value)) {
            e.target.value = value.slice(0, -1); // Last invalid character hata dega
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let editBtn = document.getElementById("edit-btn");
        let saveBtn = document.getElementById("save-btn");
        let cancelBtn = document.getElementById("cancel-btn");

        let fieldsToEnable = [
            "pi-name", "pi-email", "pi-age",
            "gender-male", "gender-female", "gender-other", "pi-matstat", "pi-pincode", "pi-locality", "pi-address", "pi-city", "pi-state", "pi-country"
        ];

        function toggleFields(enable) {
            fieldsToEnable.forEach(id => {
                let field = document.getElementById(id);
                if (field) {
                    if (field.type === "radio") {
                        field.disabled = !enable;
                    } else {
                        field.readOnly = !enable;
                    }
                }
            });

            // ✅ Syncfusion Dropdown Readonly/Enable Logic
            let maritalDropdown = document.getElementById("pi-matstat").ej2_instances[0];
            if (maritalDropdown) {
                maritalDropdown.enabled = enable;
            }

            // ✅ Syncfusion DatePicker Readonly/Enable Logic
            let dobPicker = document.getElementById("pi-dob").ej2_instances[0];
            if (dobPicker) {
                dobPicker.enabled = enable; // Enable/Disable DatePicker
            }

            // ✅ Edit button hide/show logic
            editBtn.style.display = enable ? "none" : "inline-block";

            // ✅ Submit & Cancel buttons show/hide logic
            saveBtn.style.display = enable ? "inline-block" : "none";
            cancelBtn.style.display = enable ? "inline-block" : "none";
        }

        // Initially disable fields and hide Submit & Cancel buttons
        toggleFields(false);

        // Edit button event listener
        editBtn.addEventListener("click", function (event) {
            event.preventDefault();
            toggleFields(true);
        });

        // Cancel button event listener
        cancelBtn.addEventListener("click", function (event) {
            event.preventDefault();
            toggleFields(false);
        });
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $("#save-btn").click(function (e) {
            var $button = $(this);
            $button.prop("disabled", true).text("Submitting...");
            debugger;
            e.preventDefault();

            var isValid = true;

            // Function to show error messages
            function showError(inputId, message) {
                $("#" + inputId).closest(".col-md-6").find(".text-danger").text(message);
            }

            function clearError(inputId) {
                $("#" + inputId).closest(".col-md-6").find(".text-danger").text("");
            }

            // Validate Name
            if ($("#pi-name").val().trim() === "") {
                showError("pi-name", "Name is required.");
                isValid = false;
            } else {
                clearError("pi-name");
            }

            // Validate Phone Number
            if ($("#pi-phoneno").val().trim() === "") {
                showError("pi-phoneno", "Phone Number is required.");
                isValid = false;
            } else {
                clearError("pi-phoneno");
            }

            var email = $("#pi-email").val().trim();
            var emailRegex = /^[\w\.-]+@@[\w\.-]+\.\w+$/; // ✅ Regex for valid email format
            if (email === "") {
                showError("pi-email", "Email is required.");
                isValid = false;
            } else if (!emailRegex.test(email)) {
                showError("pi-email", "Invalid email address.");
                isValid = false;
            } else {
                clearError("pi-email");
            }

            // Validate Age
            var ageValue = $("#pi-age").val().trim();
            if (ageValue === "") {
                showError("pi-age", "Age is required.");
                isValid = false;
            } else if (isNaN(ageValue) || ageValue < 0 || ageValue > 99) {
                showError("pi-age", "Invalid Age.");
                isValid = false;
            } else {
                clearError("pi-age");
            }
            var dobValue = $("#pi-dob").val().trim();
            if (dobValue === "") {
                showError("pi-dob", "Date of Birth is required.");
                isValid = false;
            } else {
                var dobDate = new Date(dobValue.split('/').reverse().join('-')); // Convert dd/MM/yyyy to yyyy-MM-dd
                var currentDate = new Date();
                currentDate.setFullYear(currentDate.getFullYear()); // Subtract 1 year from today
                var minDate = new Date();
                minDate.setFullYear(currentDate.getFullYear() - 100); // Minimum 99 years allowed

                if (dobDate > currentDate) {
                    showError("pi-dob", "Invalid Date of Birth.");
                    isValid = false;
                } else if (dobDate < minDate) {
                    showError("pi-dob", "Invalid Date of Birth.");
                    isValid = false;
                }
                else if (dobDate == "Invalid Date") {
                    showError("pi-dob", "Invalid Date of Birth.");
                    isValid = false;
                }
                else {
                    clearError("pi-dob");
                }
            }

            // Validate Marital Status
            if ($("#pi-matstat").val() === null || $("#pi-matstat").val() === "") {
                showError("pi-matstat", "Marital Status is required.");
                isValid = false;
            } else {
                clearError("pi-matstat");
            }

            // If any validation fails, stop AJAX request
            if (!isValid) {
                $button.prop("disabled", false).text("Save");
                return;
            }
            var genderMapping = {
                "gender-male": "Male",
                "gender-female": "Female",
                "gender-other": "Other"
            };

            var selectedGenderId = $("input[name='gender']:checked").attr("id");
            var selectedGender = genderMapping[selectedGenderId] || "";
            var dobValue = $("#pi-dob").val(); // Get the date input
            var formattedDob = formatDateToMMDDYYYY(dobValue); // Convert to MM/DD/YYYY

            var formData = {
                Name: $("#pi-name").val(),
                Id: $("#PatientId").val(),
                Email: $("#pi-email").val(),
                Age: $("#pi-age").val(),
                Dob: formattedDob, // Use formatted date
                Gender: selectedGender, // Get selected gender
                MaritalStatus: $("#pi-matstat").val()
            };

            // Function to convert date to MM/DD/YYYY
            function formatDateToMMDDYYYY(dateString) {
                if (!dateString) return "";

                var parts = dateString.split("/"); // Assuming input format is DD/MM/YYYY
                if (parts.length === 3) {
                    return `${parts[1]}/${parts[0]}/${parts[2]}`; // Convert to MM/DD/YYYY
                }
                return dateString; // Return original if format is unknown
            }


            $.ajax({
                url: "/Patient/Index?handler=SavePatient",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(formData),
                success: function (response) {
                    localStorage.setItem("showPatientSuccessMessage", "true"); // Set flag before reload
                    location.reload(); // Reload page
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        });
        $(document).ready(function () {
            // Check if success message flag is set in localStorage
            if (localStorage.getItem("showPatientSuccessMessage") === "true") {
                toastr.success("Patient details saved successfully!"); // Show success message
                localStorage.removeItem("showPatientSuccessMessage"); // Remove flag after showing message
            }
        });
    });
</script>


<script>
    function onLoad() {
        this.dataSource.dataSource.headers = [{ 'XSRF-TOKEN': $("input:hidden[name='__RequestVerificationToken']").val() }];
    }

    function toolbarClick(args) {
        debugger;

        if (args.item.id === 'GridLeave_excelexport') {
            this.excelExport({ hierarchyExportMode: "All", fileName: "Holidays.xlsx" });
        }
        if (args.item.id === 'GridLeave_resetlayout') {
            clearFilters('GridAppointments');
        }
        if (args.item.id === 'GridLeave_clearfilters') {
            var gridObj = document.getElementById('GridAppointments').ej2_instances[0];
            gridObj.searchModule.search("");
            gridObj.clearFiltering();
        }

    }

    function gridActionComplete() {
        updateGridUserPreference('GridAppointments');
    }
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        loadAppointments();
    });

    function loadAppointments() {
        $.ajax({
            url: '/Patient/Index?handler=AppointmentViewCard&id=' + '@Model.Id',
            type: 'POST',
            contentType: 'application/json',
            success: function (response) {
                console.log(response); // Debugging ke liye

                var appointments = response.result;
                var container = $("#appointments-container");
                container.empty();

                $.each(appointments, function (index, appointment) {
                    console.log(appointment); // Check if appointment has correct data
                    var badgeClass = "";
                    if (appointment.statusName === "Booked" || appointment.statusName === "Completed") {
                        badgeClass = "badge-green";
                    } else if (appointment.statusName === "Cancelled") {
                        badgeClass = "badge-red";
                    }
                    appointment.appointmentStartTime = formatDateTime(appointment.appointmentStartTime);
                    var cardHtml = `
                                <div class="ius-gridrow">
                                    <div class="ius-appbody">
                                        <div class="ius-appinfo">
                                            <input type="hidden" name="appointmentId" value="${appointment.id}">

                                                        <h3>${appointment.doctorName || 'N/A'}</h3>
                                            <div class="ius-apptyfo">
                                                        <span class="appinfo-type">${appointment.appoinmentType || 'N/A'}</span>
                                                <span class="appinfo-dot"></span>
                                            </div>
                                        </div>

                                        <div class="ius-ctrls">
                                             ${appointment.statusName !== "Cancelled" && appointment.appoinmentType !== "Appointment Request for Online Consultation" && appointment.appoinmentType !== "Appointment Request for Procedures" ? `
                                                <a href="#schedulerModal" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#schedulerModal">
                                                         <img loading="lazy" src="@Url.Content("~/assets/calendar.svg")" width="18" height="20" alt="Calendar">

                                            </a>
                                            <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                                            <img loading="lazy" src="@Url.Content("~/assets/delete.svg")" width = "18" height = "20" alt = "Cancel" >
                                            </a>

                                                ` : ''}

                                        </div>
                                    </div>
                                    <div class="ius-foo">
                                        <div class="ius-datetime">
                                            <div class="datetime-label text-sb">Date & Time</div>
                                                    <div>${appointment.appointmentStartTime || 'N/A'}</div>
                                        </div>
                                        <div class="ius-status">
                                             <div class="ius-badge ${badgeClass}">${appointment.statusName || 'N/A'}</div>
                                        </div>
                                    </div>
                                </div>
                            `;
                    container.append(cardHtml);
                });
            },
            error: function (xhr, status, error) {
                console.error("Error fetching appointments: ", error);
            }
        });
        function formatDateTime(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);

            if (isNaN(date.getTime())) return 'N/A';

            let day = String(date.getDate()).padStart(2, '0');
            let month = String(date.getMonth() + 1).padStart(2, '0'); // Month zero-based hota hai
            let year = date.getFullYear();
            let hours = date.getHours();
            let minutes = String(date.getMinutes()).padStart(2, '0');
            let seconds = String(date.getSeconds()).padStart(2, '0');
            let ampm = hours >= 12 ? 'PM' : 'AM';

            hours = hours % 12;
            hours = hours ? hours : 12; // 0 ko 12 mein convert karna
            hours = String(hours).padStart(2, '0');

            return `${day}/${month}/${year} ${hours}:${minutes}:${seconds} ${ampm}`;
        }
    }

</script>
<style>
    span.e-input-group.e-control-wrapper.e-ddl.e-lib.e-keyboard.e-valid-input.e-disabled {
        background: #e9ecef !important;
        color: black !important;
    }

    .holiday-cell {
        background-color: #dee2e6 !important; /* Light red */
        color: #721c24 !important;
        pointer-events: none; /* Disable clicks */
        opacity: 0.6; /* Make it look inactive */
    }

    .form-control:disabled, .form-control[readonly] {
        background-color: #e9ecef;
        opacity: 1;
        color: rgba(0, 0, 0, 0.42);
    }

    span.e-input-group.e-control-wrapper.e-date-wrapper.e-valid-input.e-disabled {
        background-color: #e9ecef !important;
        color: black !important;
    }

    .form-check-input {
        appearance: radio; /* Makes checkbox look like radio button */
    }


    a.marginleft {
        margin-left: 5px;
    }

    textarea#pi-address {
        resize: vertical !important;
    }

    .e-appointment.blocked-slot {
        background-color: red !important;
        color: white !important;
        text-align: center;
        font-weight: bold;
    }

    .e-appointment.blocked-slot2 {
        background-color: red !important;
        color: white !important;
        text-align: center;
        font-weight: bold;
    }

    span.badge.badge-warning {
        background-color: darkcyan;
    }
    span {
        font-size: 13px;
    }

        span.badge.badge-info {
            background-color: darkslategray;
        }

        span.badge.badge-dark {
            background-color: darkred;
        }
    .badge {
        padding: 7px 13px;
        /* border-radius: 20px; */
        color: white;
        font-weight: 500;
        display: inline-block;
        text-align: center;
        font-size: 12px;
        width: 130px;
    }

    .badge-success {
        background-color: #28a745; /* Green */
    }

    .badge-Primary {
        background-color: #5bc0de; /* Green */
    }

    .badge-secondary {
        background-color: #6c757d; /* Gray */
    }

    .badge-danger {
        background-color: #dc3545; /* Red */
    }

    .e-appointment.e-read-only {
        width: 100% !important;
        left: 0 !important;
    }



    .e-quick-popup-wrapper.e-lib.e-popup.e-control.e-popup-open {
        display: none;
    }

    .e-current-time {
        display: none;
    }

    .e-schedule .e-hide-childs > * {
        display: contents !important;
    }
</style>