@page
@model Patientportal.Pages.IndexModel
@{
    ViewData["Title"] = "Patient Portal";
    Layout = "_LayoutMain";
}
@{

    List<object> toolbarItems = new List<object>();
    toolbarItems.Add("Search");
    List<string> StateList = new List<string> { "Gujarat", "Maharashtra", "Rajasthan" };
    List<string> CountryList = new List<string> { "Canada", "India", "United States" };
    List<string> MaritalStatusList = new List<string> { "Single", "Married",  "Divorced"};
    List<string> AppointmentWith = new List<string> { "Dr. Sejal Saheta", "Dr. Jane Doe", "Dr. John Doe" };
    List<string> FormofAppointment = new List<string> { "Inclinic", "Video" };
}
@Html.AntiForgeryToken()
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Portal</title>

    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/custom.css">
    <link rel="stylesheet" href="~/css/responsive.css">

    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon">
    <link rel="icon" href="./favicon.ico" type="image/x-icon">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">

</head>
<body>
    <main class="page">
        <div class="container container-x">
            <h1 class="page-title text-28">Patient Portal</h1>

            <div class="ius-block ius-card">
                <h2>Patient Information</h2>

                <form class="ius-form" action="#" method="POST">
                    <input type="hidden" id="PatientId" asp-for="PatientData.Id" name="medicalPatientSignature" class="custom-field-height" />
                    <div class="row">
                        <div class="col-md-6 col-xl-4">
                            <label for="pi-name" class="form-label">Name</label>
                            <input type="text" name="patientname" maxlength="100" asp-for="PatientData.Name" class="form-control" id="pi-name">
                            <span asp-validation-for="PatientData.Name" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-phoneno" class="form-label">Phone Number</label>
                            <input type="text" name="phoneno" asp-for="PatientData.Mobile" class="form-control" id="pi-phoneno"  disabled>
                            <span asp-validation-for="PatientData.Mobile" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-email" class="form-label">Email</label>
                            <input type="email" name="email" asp-for="PatientData.Email" maxlength="100" class="form-control" id="pi-email">
                            <span asp-validation-for="PatientData.Email" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-age" class="form-label">Age</label>
                            <input type="number" name="age" asp-for="PatientData.Age" maxlength="2" class="form-control" id="pi-age" >
                            <span asp-validation-for="PatientData.Age" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-dob" class="form-label">Date of Birth</label>
                            @* <input type="date" name="dob" class="form-control form-date" id="pi-dob" value="1995-09-03"> *@
                            <ejs-datepicker id="pi-dob" ejs-for="PatientData.Dob" class="form-control" format="dd/MM/yyyy" style="height: 45px;"></ejs-datepicker>
                            <span asp-validation-for="PatientData.Dob" class="text-danger"></span>
                        </div>
                        <script>
                            document.addEventListener("DOMContentLoaded", function () {
                                var dobInput = document.getElementById("pi-dob");

                                dobInput.addEventListener("input", function (e) {
                                    var val = dobInput.value.replace(/\D/g, ""); // Remove non-numeric characters
                                    var formatted = "";

                                    if (val.length > 2) {
                                        formatted += val.substring(0, 2) + "/";
                                        if (val.length > 4) {
                                            formatted += val.substring(2, 4) + "/";
                                            formatted += val.substring(4, 8);
                                        } else {
                                            formatted += val.substring(2);
                                        }
                                    } else {
                                        formatted = val;
                                    }

                                    dobInput.value = formatted;
                                });

                                dobInput.addEventListener("keydown", function (event) {
                                    var allowedKeys = [8, 46]; // Allow backspace and delete
                                    if ((event.keyCode >= 48 && event.keyCode <= 57) ||  // Numbers 0-9
                                        (event.keyCode >= 96 && event.keyCode <= 105) || // Numpad Numbers
                                        allowedKeys.includes(event.keyCode)) {
                                        return true;
                                    }
                                    event.preventDefault(); // Prevent other keys
                                });
                            });
                        </script>
                        <div class="col-md-6 col-xl-4">
                            <label class="form-label">Gender</label>

                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="gender" id="gender-male">
                                <label class="btn" for="gender-male">Male</label>

                                <input type="radio" class="btn-check" name="gender" id="gender-female">
                                <label class="btn" for="gender-female">Female</label>

                                <input type="radio" class="btn-check" name="gender" id="gender-other">
                                <label class="btn" for="gender-other">Other</label>
                            </div>
                            <span asp-validation-for="PatientData.Gender" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-matstat" class="form-label">Marital Status</label>
                            <ejs-dropdownlist Id="pi-matstat" ejs-for="PatientData.MaritalStatus" style="height: 45px;" class="form-control" TValue="string" DataSource="MaritalStatusList" Placeholder="Select Marital Status"></ejs-dropdownlist>
                            <span asp-validation-for="PatientData.MaritalStatus" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-pincode" class="form-label">Pincode</label>
                            <input type="number" name="pincode" id="pi-pincode" asp-for="PatientData.Pincode" class="form-control" readonly>
                            <span asp-validation-for="PatientData.Pincode" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-locality" class="form-label">Locality</label>
                            <input type="text" name="locality" id="pi-locality" asp-for="PatientData.Locality" class="form-control" readonly>
                            <span asp-validation-for="PatientData.Locality" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-address" class="form-label">Address</label>
                            <textarea type="text" name="address" style="min-height:45px;" asp-for="PatientData.Address" id="pi-address" class="form-control" readonly> </textarea>
                            <span asp-validation-for="PatientData.Address" class="text-danger"></span>

                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-city" class="form-label">City</label>
                            <input type="text" id="pi-city" class="form-control" name="city" asp-for="PatientData.CityName"  readonly>
                            <span asp-validation-for="PatientData.City" class="text-danger"></span>

                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-state" class="form-label">State</label>
                            <input type="text" id="pi-state" class="form-control" name="state" asp-for="PatientData.StateName" readonly>
                            <span asp-validation-for="PatientData.State" class="text-danger"></span>

                           @*  <ejs-dropdownlist ID="pi-state" class="form-control"  TValue="string" DataSource="StateList" Placeholder="Select State"></ejs-dropdownlist>
 *@
                        </div>

                        <div class="col-md-6 col-xl-4">
                            <label for="pi-country" class="form-label">Country</label>
                            <input type="text" id="pi-country" class="form-control" name="Country" asp-for="PatientData.CountryName" readonly>
                            <span asp-validation-for="PatientData.CountryName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-actions">
                        <a href="#" class="bttn bttn-primary" id="edit-btn" title="Edit">Edit</a>
                        <a href="#" class="bttn bttn-primary-outline" id="cancel-btn" title="Cancel" disabled>Cancel</a>
                        <a href="#" class="bttn bttn-primary" id="save-btn" title="Save" disabled>Save</a>

                    </div>
                </form>
            </div>
            @if (Model.ChangeRequests.Count > 0 && Model.ChangeRequests != null )
            {
                <div class="ius-block ius-card ius-notes">
                    <h2 class="mb-2 pb-1 text--red">Changes Requested</h2>
                    <ol>
                        @foreach (var change in Model.ChangeRequests)
                        {
                            <li>@change</li>
                        }
                    </ol>
                </div>

            }
                <div class="ius-block ius-card ius-notes">
                    <h2 class="mb-2 pb-1 text--red">Notes</h2>
                <ol>
                    <li>Appointment  will be booked for consultation with Dr. Sejal Saheta.</li>
                    <li>For an appointment with an aesthetician for cosmetic procedures please call Clinic - <a href="tel:+91-9639639630" title="91-9639639630">9639639630</a></li>
                </ol>
            </div>
            
            <div class="ius-block ius-card ius-appdata">
                <div class="ius-block-head">
                    <h2>Appointment Grid</h2>

                    <div class="ius-grid-filters">
                        <a class="bttn-add" href="#app-add" data-bs-toggle="modal" data-bs-target="#app-add" title="Add Appointment">
                            <img loading="lazy" src="~/assets/plus.svg" width="19" height="19" alt="Add">
                        </a>
                    </div>
                </div>

                <!-- Only for desktop : Syncfusion -->
                <div class="ius-table d-none d-lg-block table-responsive">
                        <ejs-grid id="GridAppointments"
                                  allowResizing="true"
                                  allowExcelExport="true"
                                  allowFiltering="true"
                                  allowPaging="true"
                                  allowSorting="true"
                                  allowSelection="true"
                                  allowReordering="true"
                                  enableHeaderFocus="true"
                                  enablePersistence="true"
                                  enableHover="true"
                                  autoFit="true"
                                  height="200"
                                  showColumnChooser="true"
                                  rowHeight="38"
                                  toolbar=toolbarItems
                                  toolbarClick="toolbarClick">

                            <e-data-manager url="/Index?handler=AppointmentView" adaptor="UrlAdaptor" crossDomain="true"></e-data-manager>

                        <e-grid-searchsettings fields="@(new string[] {"AppoinmentType","DoctorName","AppointmentForm","AppointmentStartTime","StatusName"})"></e-grid-searchsettings>

                            <e-grid-filtersettings type="Excel"></e-grid-filtersettings>
                            <e-grid-loadingIndicator indicatorType="Shimmer"></e-grid-loadingIndicator>
                            <e-grid-pagesettings pageCount="15" pageSize="15" pageSizes="@(new string[] { "All","12","15","25","50"})"></e-grid-pagesettings>
                            <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>

                            <e-grid-columns>

                                <e-grid-column headerText="Actions" width="120" textAlign="Center" template="#actionTemplate"></e-grid-column>
                                <e-grid-column field="Id" headerText="Id" width="200" visible="false"></e-grid-column>
                            <e-grid-column field="AppoinmentType" headerText="Type of Appointment" width="200"></e-grid-column>
                                <e-grid-column field="DoctorName" headerText="Appointment With" width="200"></e-grid-column>
                            <e-grid-column field="AppointmentForm" headerText="Form of Appointment" width="200"></e-grid-column>
                            <e-grid-column field="AppointmentStartTime" headerText="Appointment Date Time" format="@Model.EjsDateTimePattern" type="dateTime" width="200"></e-grid-column>
                            <e-grid-column field="StatusName" headerText="Status" width="150"></e-grid-column>
                            </e-grid-columns>
                        </ejs-grid>
                    <script id="actionTemplate" type="text/x-template">
                        ${if(statusName !== "Cancelled")}
                            <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                <img loading="lazy" src="@Url.Content("~/assets/calendar.svg")" width="18" height="20" alt="Calendar">
                            </a>
                            <a href="#app-cancel" class="marginleft" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                <img loading="lazy" src="@Url.Content("~/assets/delete.svg")" width="18" height="20" alt="Cancel">
                            </a>
                        ${/if}
                    </script>

                  

                </div>
                <script>
                    document.addEventListener("DOMContentLoaded", function () {
                        // Event delegation for dynamically generated elements
                        document.querySelector("#GridAppointments").addEventListener("click", function (event) {
                            let rescheduleBtn = event.target.closest(".app-resched");
                            let cancelBtn = event.target.closest(".marginleft");

                            if (rescheduleBtn) {
                                let row = rescheduleBtn.closest("tr");
                                if (row) {
                                    let grid = document.getElementById("GridAppointments").ej2_instances[0];
                                    let rowData = grid.getRowInfo(row).rowData;
                                    let appointmentId = rowData.id;

                                    // Set the Id value in the hidden PatientId field inside Reschedule Modal
                                    document.getElementById("AppoinmentId").value = appointmentId;
                                }
                            }

                            if (cancelBtn) {
                                let row = cancelBtn.closest("tr");
                                if (row) {
                                    let grid = document.getElementById("GridAppointments").ej2_instances[0];
                                    let rowData = grid.getRowInfo(row).rowData;
                                    let appointmentId = rowData.id;

                                    // Set the Id value in the hidden field inside Cancel Modal
                                    document.getElementById("CancelPatientId").value = appointmentId;
                                }
                            }
                        });
                    });


                </script>
                <script>
                    document.addEventListener("DOMContentLoaded", function () {
                        var ageInput = document.getElementById("pi-age");
                        var dobPicker = document.getElementById("pi-dob").ej2_instances[0]; // Syncfusion Datepicker instance

                        // Age se Date of Birth calculate karna
                        ageInput.addEventListener("input", function () {
                            var age = parseInt(this.value, 10);
                            if (!isNaN(age) && age > 0) {
                                var today = new Date();
                                var birthYear = today.getFullYear() - age;
                                var birthDate = new Date(birthYear, today.getMonth(), today.getDate());
                                dobPicker.value = birthDate; // Syncfusion Datepicker me set karna
                            }
                        });

                        // Date of Birth se Age calculate karna
                        dobPicker.addEventListener("change", function () {
                            var dob = dobPicker.value;
                            if (dob) {
                                var today = new Date();
                                var birthDate = new Date(dob);
                                var age = today.getFullYear() - birthDate.getFullYear();

                                // Agar DOB ke month aur date aaj ke month aur date se aage hain, toh age -1 karna
                                var monthDiff = today.getMonth() - birthDate.getMonth();
                                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                                    age--;
                                }

                                ageInput.value = age; // Age input ko update karna
                            }
                        });
                    });
                </script>

                <!-- Only for mobile : Syncfusion -->
                <div class="ius-grid d-lg-none text-14" id="appointments-container">
                    <div class="ius-gridrow">
                        <div class="ius-appbody">
                            <div class="ius-appinfo">
                                <h3>Dr. Sejal Saheta</h3>
                                <div class="ius-apptyfo">
                                    <span class="appinfo-type">Consultation</span>
                                    <span class="appinfo-dot"></span>
                                    <span class="appinfo-form">Inclinic</span>
                                </div>
                            </div>
                            <div class="ius-ctrls">
                                <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                    <img loading="lazy" src="~/assets/calendar.svg" width="18" height="20" alt="Calendar">
                                </a>
                                <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                    <img loading="lazy" src="~/assets/delete.svg" width="18" height="20" alt="Cancel">
                                </a>
                            </div>
                        </div>
                        <div class="ius-foo">
                            <div class="ius-datetime">
                                <div class="datetime-label text-sb">Date & Time</div>
                                <div>1/3/2025 12:10:00</div>
                            </div>

                            <div class="ius-status">
                                <div class="ius-badge">Reschedule</div>
                            </div>
                        </div>
                    </div>

                    <div class="ius-gridrow">
                        <div class="ius-appbody">
                            <div class="ius-appinfo">
                                <h3>Dr. Sejal Saheta</h3>
                                <div class="ius-apptyfo">
                                    <span class="appinfo-type">Consultation</span>
                                    <span class="appinfo-dot"></span>
                                    <span class="appinfo-form">Inclinic</span>
                                </div>
                            </div>
                            <div class="ius-ctrls">
                                <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                    <img loading="lazy" src="~/assets/calendar.svg" width="18" height="20" alt="Calendar">
                                </a>
                                <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                    <img loading="lazy" src="~/assets/delete.svg" width="18" height="20" alt="Cancel">
                                </a>
                            </div>
                        </div>
                        <div class="ius-foo">
                            <div class="ius-datetime">
                                <div class="datetime-label text-sb">Date & Time</div>
                                <div>1/3/2025 12:10:00</div>
                            </div>

                            <div class="ius-status">
                                <div class="ius-badge badge-green">Booked</div>
                            </div>
                        </div>
                    </div>

                    <div class="ius-gridrow">
                        <div class="ius-appbody">
                            <div class="ius-appinfo">
                                <h3>Dr. Sejal Saheta</h3>
                                <div class="ius-apptyfo">
                                    <span class="appinfo-type">Consultation</span>
                                    <span class="appinfo-dot"></span>
                                    <span class="appinfo-form">Inclinic</span>
                                </div>
                            </div>
                            <div class="ius-ctrls">
                                <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                    <img loading="lazy" src="~/assets/calendar.svg" width="18" height="20" alt="Calendar">
                                </a>
                                <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                    <img loading="lazy" src="~/assets/delete.svg" width="18" height="20" alt="Cancel">
                                </a>
                            </div>
                        </div>
                        <div class="ius-foo">
                            <div class="ius-datetime">
                                <div class="datetime-label text-sb">Date & Time</div>
                                <div>1/3/2025 12:10:00</div>
                            </div>

                            <div class="ius-status">
                                <div class="ius-badge badge-red">Cancelled</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <!-- Cancel Appointment - Modal -->
    <div class="modal fade" id="app-cancel">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">Cancel Appointment</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="CancelPatientId"  name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="StatusIds" value="79" class="custom-field-height" />
                <div class="modal-body">
                    <div class="">
                        <label for="pi-Resason" class="form-label">Reason*</label>
                        <input type="Text" name="Resason" class="form-control form-date"  maxlength="100" id="pi-Resason" />
                        <span id="Span-reson" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitCancel" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#SubmitCancel").click(function () {
                var appointmentId = $("#CancelPatientId").val();
                var statusId = $("#StatusIds").val();
                var reason = $("#pi-Resason").val();

                if (reason === "") {
                    $("#Span-reson").text("Reason is required");
                    return; // Stop further execution
                } else {
                    $("#Span-reson").text(""); // Clear error if input is valid
                }

                var requestData = {
                    Id: appointmentId,
                    StatusId: statusId,
                    Comment: reason
                };

                $.ajax({
                    url: "/Index?handler=Pireschedule",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        localStorage.setItem("showCancelSuccessMessage", "true"); // Set flag before reload
                        location.reload(); // Reload page
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });
            });
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showCancelSuccessMessage") === "true") {
                    toastr.success("Appointment Cancel successfully!"); // Show success message
                    localStorage.removeItem("showCancelSuccessMessage"); // Remove flag after showing message
                }
            });
        });
    </script>


    <!-- Reschedule Appointment - Modal -->
    <div class="modal fade" id="app-resched">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">Reschedule Appointment</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <input type="hidden" id="AppoinmentId" name="medicalPatientSignature" class="custom-field-height" />
                <input type="hidden" id="StatusId" value="77" name="medicalPatientSignature" class="custom-field-height" />
                <div class="modal-body">
                    <div class="">
                        <label for="pi-resched" class="form-label">Appointment Date Time*</label>
                        <ejs-datetimepicker id="pi-resched" step="15" min="DateTime.Now" style="height:45px;" format="@Model.EjsDateTimePattern"></ejs-datetimepicker>
                        <span id="AptDatetime-reson" class="text-danger"></span>
                    </div>
                    <div class="">
                        <label for="pi-ResasonRe" class="form-label">Reason*</label>
                        <input type="Text" name="Resason" class="form-control form-date" maxlength="100" id="pi-ReasonRe" />
                        <span id="Aptreosan-reson" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitRescedule" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#SubmitRescedule").click(function () {
                var appointmentId = $("#AppoinmentId").val();
                var statusId = $("#StatusId").val();
                var appointmentDateTime = $("#pi-resched").val();
                var reason = $("#pi-ReasonRe").val();
                var selectedDate = appointmentDateTime;
                var currentDate = new Date(); // Current date-time
                var formattedCurrentDate = formatDate(currentDate); // Format the current date


                if (appointmentDateTime === "") {
                    $("#AptDatetime-reson").text("Appointment Date Time is required.");
                    return; // Stop further execution
                }
                else if (selectedDate < formattedCurrentDate) {
                    $("#AptDatetime-reson").text("Invalid Appointment Date Time.");
                    return; // Stop further execution
                }
                else {
                    $("#AptDatetime-reson").text(""); // Clear error if input is valid
                }
                if (reason === "") {
                    $("#Aptreosan-reson").text("Reason is required.");
                    return; // Stop further execution
                } else {
                    $("#Aptreosan-reson").text(""); // Clear error if input is valid
                }
                var formattedDate = convertDateFormat(appointmentDateTime);


                var requestData = {
                    Id: appointmentId,
                    StatusId: statusId,
                    AppointmentStartTime: formattedDate,
                    Comment: reason
                };

                $.ajax({
                    url: "/Index?handler=Pireschedule",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        localStorage.setItem("showRescheduleSuccessMessage", "true"); // Set flag before reload
                        location.reload(); // Reload page
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });
            });
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showRescheduleSuccessMessage") === "true") {
                    toastr.success("Appointment Rescheduled successfully!"); // Show success message
                    localStorage.removeItem("showRescheduleSuccessMessage"); // Remove flag after showing message
                }
            });
            function convertDateFormat(dateString) {
                var parts = dateString.split(/[\s/:]+/); // Split date and time
                var day = parts[0];
                var month = parts[1];
                var year = parts[2];
                var hours = parseInt(parts[3]);
                var minutes = parts[4];
                var seconds = parts[5];
                var meridian = parts[6];

                // Convert 12-hour format to 24-hour format
                if (meridian === "PM" && hours !== 12) {
                    hours += 12;
                } else if (meridian === "AM" && hours === 12) {
                    hours = 0;
                }

                // Format into "YYYY-MM-DD HH:mm:ss"
                return `${year}-${month}-${day} ${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            }
            function formatDate(date) {
                var dd = String(date.getDate()).padStart(2, '0');
                var MM = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
                var yyyy = date.getFullYear();

                var hours = date.getHours();
                var minutes = String(date.getMinutes()).padStart(2, '0');
                var seconds = String(date.getSeconds()).padStart(2, '0');
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format

                return `${dd}/${MM}/${yyyy} ${hours}:${minutes}:${seconds} ${ampm}`;
            }

            // Function to parse dd/MM/yyyy hh:mm:ss a string to Date object
            function parseDate(dateStr) {
                var parts = dateStr.split(/[\s/:]+/); // Split by space, slash, or colon
                var dd = parseInt(parts[0], 10);
                var MM = parseInt(parts[1], 10) - 1; // Months are zero-based
                var yyyy = parseInt(parts[2], 10);
                var hours = parseInt(parts[3], 10);
                var minutes = parseInt(parts[4], 10);
                var seconds = parseInt(parts[5], 10);
                var ampm = parts[6];

                if (ampm === 'PM' && hours < 12) hours += 12;
                if (ampm === 'AM' && hours === 12) hours = 0;

                return new Date(yyyy, MM, dd, hours, minutes, seconds);
            }

        });

    </script>



    <!-- Add Appointment - Modal -->
    <div class="modal fade" id="app-add">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="mb-0">Add Appointment</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid ius-form">
                        <div class="row">
                            <input type="hidden" id="AddPatientId" asp-for="PatientData.Id" name="medicalPatientSignature" class="custom-field-height" />

                            @*    <div class="col-md-6">
                                <label for="app-type" class="form-label">Type of Appointment</label>
                                <ejs-dropdownlist class="form-control" id="app-with" DataSource="AppointmentWith" placeholder="Select Doctor"></ejs-dropdownlist>
                            </div> *@
                            <div class="col-md-6">
                                <label for="app-form" class="form-label">Form of Appointment*</label>
                                <ejs-dropdownlist class="form-control" id="app-form" style="height:45px;" DataSource="FormofAppointment" placeholder="Select Form"></ejs-dropdownlist>
                                <span id="AptAddformapt" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label for="app-datetime" class="form-label">Appointment Date Time*</label>
                                <ejs-datetimepicker id="app-datetim" class="form-control" step="15" min="DateTime.Now" style="height:45px;" format="@Model.EjsDateTimePattern"></ejs-datetimepicker>
                                <span id="AptaddDatetime" class="text-danger"></span>
                            </div>
                          @*   <div class="col-md-6">
                                <label for="app-status" class="form-label">Status</label> 
                                <select class="form-select" id="app-status" name="appstatus">
                                    <option value="Inclinic">Rescheduled</option>
                                    <option value="Online">New</option>
                                    <option value="Visit">Old</option>
                                </select>
                            </div> *@
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" id="SubmitAppointment" class="bttn bttn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            $("#SubmitAppointment").click(function () {
                var patietId = $("#AddPatientId").val();
                var formofappt = $("#app-form").val();
                var appointmentDateTime = $("#app-datetim").val();
                var selectedDate = appointmentDateTime;
                var currentDate = new Date(); // Current date-time
                var formattedCurrentDate = formatDate(currentDate); // Format the current date

                var isValid = true;

                if (appointmentDateTime === "") {
                    $("#AptaddDatetime").text("Appointment Date Time is required.");
                    isValid = false; // Stop further execution
                }
               else if (new Date(selectedDate) < new Date(formattedCurrentDate)) {
                    $("#AptaddDatetime").text("Invalid Appointment Date Time.");
                    isValid = false; // Stop further execution
                }

                else {
                    $("#AptaddDatetime").text(""); // Clear error if input is valid
                }
                if (formofappt === "") {
                    $("#AptAddformapt").text("Form of Appointment is required.");
                    isValid = false; // Stop further execution
                } else {
                    $("#AptAddformapt").text(""); // Clear error if input is valid
                }

                if(!isValid)
                {
                    return;
                }
                var formattedDate = convertDateFormat(appointmentDateTime);


                var requestData = {
                    PatientId: patietId,
                    AppointmentForm: formofappt,
                    AppointmentStartTime: formattedDate
                };

                $.ajax({
                    url: "/Index?handler=Addaptall",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        localStorage.setItem("showSuccessMessage", "true"); // Set flag before reload
                        location.reload(); // Reload page
                    },
                    error: function () {
                        alert("Failed to submit reschedule request.");
                    }
                });

            });
            function convertDateFormat(dateString) {
                var parts = dateString.split(/[\s/:]+/); // Split date and time
                var day = parts[0];
                var month = parts[1];
                var year = parts[2];
                var hours = parseInt(parts[3]);
                var minutes = parts[4];
                var seconds = parts[5];
                var meridian = parts[6];

                // Convert 12-hour format to 24-hour format
                if (meridian === "PM" && hours !== 12) {
                    hours += 12;
                } else if (meridian === "AM" && hours === 12) {
                    hours = 0;
                }

                // Format into "YYYY-MM-DD HH:mm:ss"
                return `${year}-${month}-${day} ${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            }
            $(document).ready(function () {
                // Check if success message flag is set in localStorage
                if (localStorage.getItem("showSuccessMessage") === "true") {
                    toastr.success("Appointment Added successfully!"); // Show success message
                    localStorage.removeItem("showSuccessMessage"); // Remove flag after showing message
                }
            });
            function formatDate(date) {
                var dd = String(date.getDate()).padStart(2, '0');
                var MM = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
                var yyyy = date.getFullYear();

                var hours = date.getHours();
                var minutes = String(date.getMinutes()).padStart(2, '0');
                var seconds = String(date.getSeconds()).padStart(2, '0');
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format

                return `${dd}/${MM}/${yyyy} ${hours}:${minutes}:${seconds} ${ampm}`;
            }

            // Function to parse dd/MM/yyyy hh:mm:ss a string to Date object
            function parseDate(dateStr) {
                var parts = dateStr.split(/[\s/:]+/); // Split by space, slash, or colon
                var dd = parseInt(parts[0], 10);
                var MM = parseInt(parts[1], 10) - 1; // Months are zero-based
                var yyyy = parseInt(parts[2], 10);
                var hours = parseInt(parts[3], 10);
                var minutes = parseInt(parts[4], 10);
                var seconds = parseInt(parts[5], 10);
                var ampm = parts[6];

                if (ampm === 'PM' && hours < 12) hours += 12;
                if (ampm === 'AM' && hours === 12) hours = 0;

                return new Date(yyyy, MM, dd, hours, minutes, seconds);
            }

        });

    </script>
    <script src="./js/jquery.min.js"></script>
    <script src="./js/bootstrap.bundle.min.js"></script>
    <script src="./js/custom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


</body>
</html>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var gender = "@Model.PatientData.Gender"; // Server se value leke aayenge

        if (gender === "Male") {
            document.getElementById("gender-male").checked = true;
        } else if (gender === "Female") {
            document.getElementById("gender-female").checked = true;
        } else if (gender === "Other") {
            document.getElementById("gender-other").checked = true;
        }
    });
</script>
<script>
    document.getElementById('pi-age').addEventListener('input', function (e) {
        let value = e.target.value;
        if (value.length > 2) {
            e.target.value = value.slice(0, 2); // Sirf 2 characters allow karega
        }
    });

    document.getElementById('pi-name').addEventListener('input', function (e) {
        let value = e.target.value;
        let regex = /^[A-Za-z\s]*$/; // Sirf characters aur space allow karega
        if (!regex.test(value)) {
            e.target.value = value.slice(0, -1); // Last invalid character hata dega
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let editBtn = document.getElementById("edit-btn");
        let saveBtn = document.getElementById("save-btn");
        let cancelBtn = document.getElementById("cancel-btn");

        let fieldsToEnable = [
            "pi-name", "pi-email", "pi-age",
            "gender-male", "gender-female", "gender-other"
        ];

        function toggleFields(enable) {
            fieldsToEnable.forEach(id => {
                let field = document.getElementById(id);
                if (field) {
                    if (field.type === "radio") {
                        field.disabled = !enable;
                    } else {
                        field.readOnly = !enable;
                    }
                }
            });

            // ✅ Syncfusion Dropdown Readonly/Enable Logic
            let maritalDropdown = document.getElementById("pi-matstat").ej2_instances[0];
            if (maritalDropdown) {
                maritalDropdown.enabled = enable;
            }

            // ✅ Syncfusion DatePicker Readonly/Enable Logic
            let dobPicker = document.getElementById("pi-dob").ej2_instances[0];
            if (dobPicker) {
                dobPicker.enabled = enable; // Enable/Disable DatePicker
            }

            // ✅ Edit button hide/show logic
            editBtn.style.display = enable ? "none" : "inline-block";

            // ✅ Submit & Cancel buttons show/hide logic
            saveBtn.style.display = enable ? "inline-block" : "none";
            cancelBtn.style.display = enable ? "inline-block" : "none";
        }

        // Initially disable fields and hide Submit & Cancel buttons
        toggleFields(false);

        // Edit button event listener
        editBtn.addEventListener("click", function (event) {
            event.preventDefault();
            toggleFields(true);
        });

        // Cancel button event listener
        cancelBtn.addEventListener("click", function (event) {
            event.preventDefault();
            toggleFields(false);
        });
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $("#save-btn").click(function (e) {
            e.preventDefault();

            var isValid = true;

            // Function to show error messages
            function showError(inputId, message) {
                $("#" + inputId).closest(".col-md-6").find(".text-danger").text(message);
            }

            function clearError(inputId) {
                $("#" + inputId).closest(".col-md-6").find(".text-danger").text("");
            }

            // Validate Name
            if ($("#pi-name").val().trim() === "") {
                showError("pi-name", "Name is required.");
                isValid = false;
            } else {
                clearError("pi-name");
            }

            // Validate Phone Number
            if ($("#pi-phoneno").val().trim() === "") {
                showError("pi-phoneno", "Phone Number is required.");
                isValid = false;
            } else {
                clearError("pi-phoneno");
            }

           var email = $("#pi-email").val().trim();
            var emailRegex = /^[\w\.-]+@@[\w\.-]+\.\w+$/; // ✅ Regex for valid email format
            if (email === "") {
                showError("pi-email", "Email is required.");
                isValid = false;
            } else if (!emailRegex.test(email)) {
                showError("pi-email", "Invalid email address.");
                isValid = false;
            } else {
                clearError("pi-email");
            }

            // Validate Age
            if ($("#pi-age").val().trim() === "") {
                showError("pi-age", "Age is required.");
                isValid = false;
            } else {
                clearError("pi-age");
            }
              var dobValue = $("#pi-dob").val().trim();
            var dobRegex = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/\d{4}$/;
            // Validate Date of Birth
            if ($("#pi-dob").val().trim() === "") {
                showError("pi-dob", "Date of Birth is required.");
                isValid = false;
            } else if (!dobRegex.test(dobValue)) {
                showError("dob-error", "Invalid Date");
                isValid = false;
            }
            else {
                clearError("pi-dob");
            }
              

            if (dobValue === "") {
                showError("dob-error", "Date of Birth is required.");
                isValid = false;
            } else if (!dobRegex.test(dobValue)) {
                showError("dob-error", "Invalid Date");
                isValid = false;
            } else {
                clearError("dob-error");
            }

            // Validate Marital Status
            if ($("#pi-matstat").val() === null || $("#pi-matstat").val() === "") {
                showError("pi-matstat", "Marital Status is required.");
                isValid = false;
            } else {
                clearError("pi-matstat");
            }

            // If any validation fails, stop AJAX request
            if (!isValid) {
                return;
            }
            var genderMapping = {
                "gender-male": "Male",
                "gender-female": "Female",
                "gender-other": "Other"
            };

            var selectedGenderId = $("input[name='gender']:checked").attr("id");
            var selectedGender = genderMapping[selectedGenderId] || "";
            var dobValue = $("#pi-dob").val(); // Get the date input
            var formattedDob = formatDateToMMDDYYYY(dobValue); // Convert to MM/DD/YYYY

            var formData = {
                Name: $("#pi-name").val(),
                Id: $("#PatientId").val(),
                Email: $("#pi-email").val(),
                Age: $("#pi-age").val(),
                Dob: formattedDob, // Use formatted date
                Gender: selectedGender, // Get selected gender
                MaritalStatus: $("#pi-matstat").val()
            };

            // Function to convert date to MM/DD/YYYY
            function formatDateToMMDDYYYY(dateString) {
                if (!dateString) return "";

                var parts = dateString.split("/"); // Assuming input format is DD/MM/YYYY
                if (parts.length === 3) {
                    return `${parts[1]}/${parts[0]}/${parts[2]}`; // Convert to MM/DD/YYYY
                }
                return dateString; // Return original if format is unknown
            }


            $.ajax({
                url: "/Index?handler=SavePatient",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(formData),
                success: function (response) {
                    localStorage.setItem("showPatientSuccessMessage", "true"); // Set flag before reload
                    location.reload(); // Reload page
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        });
        $(document).ready(function () {
            // Check if success message flag is set in localStorage
            if (localStorage.getItem("showPatientSuccessMessage") === "true") {
                toastr.success("Patient details saved successfully!"); // Show success message
                localStorage.removeItem("showPatientSuccessMessage"); // Remove flag after showing message
            }
        });
    });
</script>


<script>
    function onLoad() {
        this.dataSource.dataSource.headers = [{ 'XSRF-TOKEN': $("input:hidden[name='__RequestVerificationToken']").val() }];
    }

    function toolbarClick(args) {
        debugger;

        if (args.item.id === 'GridLeave_excelexport') {
            this.excelExport({ hierarchyExportMode: "All", fileName: "Holidays.xlsx" });
        }
        if (args.item.id === 'GridLeave_resetlayout') {
            clearFilters('GridAppointments');
        }
        if (args.item.id === 'GridLeave_clearfilters') {
            var gridObj = document.getElementById('GridAppointments').ej2_instances[0];
            gridObj.searchModule.search("");
            gridObj.clearFiltering();
        }

    }

    function gridActionComplete() {
        updateGridUserPreference('GridAppointments');
    }
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        loadAppointments();
    });

    function loadAppointments() {
        $.ajax({
            url: '/Index?handler=AppointmentViewCard', // URL sahi daalein
            type: 'POST',
            contentType: 'application/json',
            success: function (response) {
                console.log(response); // Debugging ke liye

                var appointments = response.result;
                var container = $("#appointments-container");
                container.empty();

                $.each(appointments, function (index, appointment) {
                    console.log(appointment); // Check if appointment has correct data
                    var badgeClass = "";
                    if (appointment.statusName === "Booked" || appointment.statusName === "Completed") {
                        badgeClass = "badge-green";
                    } else if (appointment.statusName === "Cancelled") {
                        badgeClass = "badge-red";
                    }
                    var cardHtml = `
                        <div class="ius-gridrow">
                            <div class="ius-appbody">
                                <div class="ius-appinfo">
                                                <h3>${appointment.doctorName || 'N/A'}</h3>
                                    <div class="ius-apptyfo">
                                                <span class="appinfo-type">${appointment.appoinmentType || 'N/A'}</span>
                                        <span class="appinfo-dot"></span>
                                                <span class="appinfo-form">${appointment.appointmentForm || 'N/A'}</span>
                                    </div>
                                </div>
                                <div class="ius-ctrls">
                                    <a href="#app-resched" class="app-resched" title="Reschedule" data-bs-toggle="modal" data-bs-target="#app-resched">
                                                 <img loading="lazy" src="@Url.Content("~/assets/calendar.svg")" width="18" height="20" alt="Calendar">

                                    </a>
                                    <a href="#app-cancel" title="Cancel" data-bs-toggle="modal" data-bs-target="#app-cancel">
                                                    <img loading="lazy" src="@Url.Content("~/assets/delete.svg")" width = "18" height = "20" alt = "Cancel" >
                                    </a>
                                </div>
                            </div>
                            <div class="ius-foo">
                                <div class="ius-datetime">
                                    <div class="datetime-label text-sb">Date & Time</div>
                                            <div>${appointment.appointmentStartTime || 'N/A'}</div>
                                </div>
                                <div class="ius-status">
                                     <div class="ius-badge ${badgeClass}">${appointment.statusName || 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                    `;
                    container.append(cardHtml);
                });
            },
            error: function (xhr, status, error) {
                console.error("Error fetching appointments: ", error);
            }
        });
    }

</script>
<style>
    span.e-input-group.e-control-wrapper.e-ddl.e-lib.e-keyboard.e-valid-input.e-disabled {
        background: #e9ecef !important;
        color: black !important;
    }

    .form-control:disabled, .form-control[readonly] {
        background-color: #e9ecef;
        opacity: 1;
        color: rgba(0, 0, 0, 0.42);
    }

    span.e-input-group.e-control-wrapper.e-date-wrapper.e-valid-input.e-disabled {
        background-color: #e9ecef !important;
        color: black !important;
    }

    a.marginleft {
        margin-left: 5px;
    }

    textarea#pi-address {
        resize: vertical !important;
    }
</style>